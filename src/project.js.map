{"version":3,"sources":["assets/src/Atk.js","assets/src/AutoSpr.js","assets/src/DataTool.js","assets/src/Data.js","assets/src/Def.js","assets/dyl/DylAd.js","assets/dyl/DylButton.js","assets/dyl/DylEndgame.js","assets/dyl/DylHpLayer.js","assets/dyl/DylLab.js","assets/dyl/DylLoadingUi.js","assets/dyl/DylNode.js","assets/dyl/DylPool.js","assets/dyl/DylPre.js","assets/dyl/DylTileMap.js","assets/dyl/DylWindow.js","assets/dyl/DylWuli.js","assets/src/En.js","assets/src/GameInit.js","assets/src/GameMain.js","assets/src/GameStart.js","assets/dyl/HjmData.js","assets/src/Me.js","assets/src/Not.js","assets/src/Shop.js","assets/src/Skill.js","assets/src/Test.js","assets/dyl/aes.js","assets/scene/test.js"],"names":["cc","Class","extends","Component","properties","onLoad","_this","this","node","type","name","hjm","atk","dyl","data","ai","atkFun","tool","spr","add","counter","top","dir","callBack","parent","setPosition","move","moveBy","fade","fadeTo","scale","scaleTo","spawn","cfun","callFunc","opacity","seq","sequence","runAction","reset","setScale","path","loader","loadRes","SpriteFrame","err","sprr","getComponent","Sprite","spriteFrame","w","h","toolLayer","Node","buttonLayer","chooseSpr","dataNode","pool","posArr","initPosArr","setType","touchOn","p","touchNode","in","apply","_toConsumableArray","getChildren","chooseTool","log","chooseNode","setData","hp","nextOn","setPage","pageNum","chooseOn","toolArr","active","backOn","setArr","arr","initTool","num","maxShowNum","id","length","i","_i","_i2","_node","_this2","size","getSize","wl","x","hl","y","oriX","oriY","addMap","n","push","resetUi","mainDataNode","toolData","atkSpr","defSpr","def","heroData","button","atkOn","defOn","defFun","end","isDebug","__isDebug","__debugShowad","agent","ads_plugin","setTimeout","anysdk","agentManager","getAdsPlugin","callFuncWithParam","__adFun","__isLoading","show","param","PluginParam","create","addAd","fun","showad","param0","callBoolFuncWithParam","prefab","newNode","instantiate","director","getScene","addChild","SceneEnum","Enum","Null","NextScene","NextLevel","Restart","ExitGame","Popup","Popdown","editor","menu","executeInEditMode","audio","default","url","AudioClip","touchFun","EventHandler","clearArr","String","sceneType","notify","_refresh","nextScene","visible","popEvent","_flag","_lastStr","_inputStr","_patch","nodeName","updateNodeData","changeStr","onEnable","myInit","self","_scale","color","getScale","on","event","onClick","audioEngine","play","handler","emit","save","loadScene","_name","replace","split","error","Number","nextName","sys","isMobile","isBrowser","window","opener","open","close","isNative","warn","stopAllActions","popNode","_cfun","_fade","_scale2","nextStr","setNodeName","now","getNodeNameArr","ans","nowId","tmpArr","j","_tmpArr","slice","str","last","input","patch","getPatch","delNum","_input","_str","stateNodeArr","__preload","initHpLayer","thisNode","__lab","Label","delPool","del","__poolId","Math","floor","string","scale1","scale2","initLab","Object","defineProperty","get","set","lab","scaleChangeId","isValid","_loop","d","cd","nodeArr","getChildByName","r","initTouch","destroy","update","dt","sin","Effect","SmallBig","Red","Shake","LoadData","loadArrName","touch","isPhysics","isShowDebug","gravity","isLoad","loadDataArr","target","loadDataCallBack","emitCallBack","js","component","initPhysics","getPhysicsManager","enabled","debugDrawFlags","PhysicsManager","DrawBits","e_aabbBit","e_pairBit","e_centerOfMassBit","e_jointBit","e_shapeBit","setLoad","setTouch","loadArr","endFun","ansArr","_loadDataArr$i","onDestroy","__loadData","releaseRes","bindNode","nowTouchState","pos","getLocation","convertToNodeSpace","getContentSize","_ref","width","height","_ref2","subSelf","len","arguments","_ref3","nx","ny","_ref4","_ref5","abs","scaleX","scaleY","checkIn","setRun","run","root","node0","createFun","act","createJsFun","createArr","counterNum","delFun","createOther","easing","easeIn","easeInOut","createMove","createDelay","delay","delayTime","Array","isArray","setRand","__randNum","rand","setAct","_this3","__oriScale","_node$color","g","b","__oriColor","__seq","__red","stopAction","easeQuadraticActionInOut","initPool","arr2","from","initDylFun","cryptoJS","__debug","map","val","value","find","addMapLayer","ori","mul","sub","maxX","maxY","mulSelf","randNum","__encryptFun","word","key","enc","Utf8","parse","iv","encrypted","AES","encrypt","mode","CBC","padding","pad","Pkcs7","Base64","stringify","ciphertext","__decryptFun","uncrypted","decrypt","toString","uncryptedNum","parseInt","JSON","localStorage","setItem","removeItem","read","getItem","data1","keyOnData","keyUpData","isOn","s","a","up","down","left","right","eventManager","addListener","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","onKeyReleased","keyOn","keyUp","addDirArr","sort","endId","_data","process","tab","undefined","counterId","counterArr","nextArr","runChild","childCounter","childJs","arrr","concat","next","_len","_key","initHjmDataFun","initHjmFun","iscryptoJS","isCryptoJS","initTileMap","tmx","TiledMap","mapSize","getMapSize","tileD","getTileSize","posMap","layerName","layer","TiledLayer","getLayerSize","getMapTileSize","gid","getTileGIDAt","getObjectGroup","getObjects","_x","_y","NodeData","rotation","anchorX","anchorY","skewX","skewY","NodeDataArr","ctor","_myInit","configurable","showData","_getString","stateArr","_read","_stateArr","_save","time","myAct","oriScale","oriOpacity","scaleR","opacityR","dataArr","Canvas","designResolution","_getSaveData","saveData","_getSaveNodeArr","_addNodeData","nodeData","collisionFun","rigidbody","RigidBody","linearVelocity","velocity","linearDamping","damping","force","applyForceToCenter","fixedRotation","enabledContactListener","collisionComponent","onBeginContact","contact","selfCollider","otherCollider","disabled","lv","level","enNameArr","getEnNameArr","getEnArr","count","enArr","initMap","myStart","_en","getNotArr","notNum","notArr","_not","myArr","_me","_cc$Class","start","touchData","myStartEnd","saveTouch","tp","delTouch","getAction","_dataArr$i","bind","getRunTypeInit","_defineProperty","getDir","moveNode","moveType","oriParent","_top","ntp","moveTo","dirArr","enPosArr","atkNode","atkDir","defNode","defDir","_skill","notLose","notWin","die","endAns","ep","en","oriData","_end","me","not","stateFun","say","_say","shopOn","_shop","stateOn","_state","playOn","readShop","readEn","_enCard","_shopCard","_playOpen","_playFight","chName","setSpr","enName","_hjm","defBg","shop","atkArr","defArr","toolTab","buyOn","coin","_i3","skillName","fun_getQueue","queue","pop","fun_getDirArr","enType","np","act_notFront","f","nowNode","back","go","act_notBack","nextNode","back1","back2","reset1","reset2","act_arrBack","arr0","arr1","notBackArr","act_rotateArrBack","backArr1","backArr2","move1","move2","act_rotate","rotate","rotateTo","fun_rotate","fun_atk","hurtNum","defFunName","notDef","fun_arrAtk","fun_getLinkArr","visit","notBackDef","_hpLayer","notAtk","_dyl","notState","friendState","bigAtk","_dyl2","twoAtk","_this4","electricAtk","_dyl3","_this5","seqArr","rotateAtk","_dyl4","_dyl5","_this6","callId","rotateArr","sprite","CryptoJS","u","l","lib","t","Base","extend","prototype","c","mixIn","hasOwnProperty","init","$super","clone","WordArray","words","sigBytes","v","e","clamp","k","ceil","call","random","Hex","join","substr","Latin1","fromCharCode","charCodeAt","decodeURIComponent","escape","Error","unescape","encodeURIComponent","q","BufferedBlockAlgorithm","_nDataBytes","_append","_process","blockSize","max","_minBufferSize","min","_doProcessBlock","splice","Hasher","cfg","_doReset","finalize","_doFinalize","_createHelper","_createHmacHelper","HMAC","algo","_map","charAt","indexOf","MD5","_hash","z","A","B","C","D","E","m","HmacMD5","EvpKDF","keySize","hasher","iterations","compute","Cipher","createEncryptor","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","_xformMode","ivSize","StreamCipher","_iv","_prevBlock","BlockCipherMode","Encryptor","Decryptor","_cipher","processBlock","encryptBlock","decryptBlock","unpad","BlockCipher","_mode","CipherParams","formatter","format","OpenSSL","salt","SerializableCipher","algorithm","_parse","kdf","execute","PasswordBasedCipher","F","G","H","_nRounds","_keySchedule","_invKeySchedule","_doCryptBlock","prePk","getAtkDefEn","checkDie","endPlay","isAtk","isDef"],"mappings":"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","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    },\r\n\r\n    onLoad () {\r\n        this.node.type = \"atk\";\r\n        let name = hjm.atk;\r\n\r\n        // id name atk atkFun say\r\n        dyl.data(\"atk.\" + name, this.node);\r\n        // this.node.atk = Number(dyl.data.atk[name].atk);\r\n        // dyl.atkFun = dyl.data.atk[name].fun;\r\n        // this.node.atk = dyl.data.atk[name];\r\n        // let spr = this.node.getChildByName(\"spr\");\r\n        // cc.loader.loadRes(\"atk/\" + name, cc.SpriteFrame, (err, sprr)=>{\r\n        // \tlet sprite = spr.getComponent(cc.Sprite);\r\n        // \tsprite.spriteFrame = sprr;\r\n        // });\r\n        ai.atkFun = this.node.atkFun;\r\n        hjm[name] = this.node.tool;\r\n        let spr = this.node.tool;\r\n        this.node.add = (counter, top, dir, callBack)=>{\r\n        \t// cc.log(\"atk add\");\r\n        \tspr.parent = top;\r\n        \tspr.setPosition(this.node);\r\n        \tlet time = 0.5;\r\n        \tlet move = cc.moveBy(time, dir);\r\n        \tlet fade = cc.fadeTo(time, 50);\r\n        \tlet scale = cc.scaleTo(time, 0.5);\r\n        \tlet spawn = cc.spawn(move, fade, scale);\r\n        \tlet cfun = cc.callFunc(()=>{\r\n        \t\tspr.opacity = 0;\r\n                callBack();\r\n        \t\tcounter();\r\n        \t});\r\n        \tlet seq = cc.sequence(spawn, cfun);\r\n        \tspr.runAction(seq);\r\n        }\r\n\r\n        this.node.reset = ()=>{\r\n        \t// cc.log(\"atk reset\");\r\n        \tspr.parent = this.node;\r\n        \tspr.setPosition(0, 0);\r\n        \tspr.opacity = 255;\r\n        \tspr.setScale(1);\r\n        \t// spr.active = true;\r\n        }\r\n    },\r\n\r\n\r\n\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    },\r\n\r\n    onLoad () {\r\n    \tthis.node.add = (path)=>{\r\n    \t\tcc.loader.loadRes(path, cc.SpriteFrame, (err, sprr)=>{\r\n        \t\tlet sprite = this.node.getComponent(cc.Sprite);\r\n        \t\tsprite.spriteFrame = sprr;\r\n        \t});\r\n    \t}\r\n    },\r\n\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        w: 5,\r\n        h: 3,\r\n        // wl: 300,\r\n        // hl: 200,\r\n        toolLayer: cc.Node,\r\n\r\n        buttonLayer: cc.Node,\r\n        // defBg: cc.Node,\r\n        chooseSpr: cc.Node,\r\n        dataNode: cc.Node,\r\n        pool: cc.Node,\r\n    },\r\n\r\n    onLoad () {\r\n        this.posArr = this.initPosArr();\r\n        // let tab = {};\r\n        // let atkArr = hjm.atkArr;\r\n        // let defArr = hjm.defArr;\r\n        // for (let i = atkArr.length - 1; i >= 0; i--) {\r\n        //     tab[atkArr[i]] = true;\r\n        // }\r\n        // for (let i = defArr.length - 1; i >= 0; i--) {\r\n        //     tab[defArr[i]] = true;\r\n        // }\r\n        // this.toolTab = tab;\r\n        // this.maxShowNum = this.w * this.h;\r\n        // this.pageNum = 0;\r\n        // this.setType(\"atk\");\r\n        this.node.setType = (type)=>this.setType(type);\r\n\r\n\r\n    },\r\n\r\n\r\n    touchOn (p) {\r\n        let touchNode = p.in(...this.buttonLayer.getChildren());\r\n        if (touchNode) {\r\n            this[touchNode.name + \"On\"](p);\r\n        }\r\n    },\r\n\r\n    chooseTool (node) {\r\n        cc.log(\"chooseTool\");\r\n        // if (!node) { //没有选中物品的状态\r\n        //     this.chooseSpr.x = -2000;\r\n        //     this.chooseNode = null;\r\n        //     this.setData(\"default\");\r\n        // }\r\n        // else {\r\n            this.chooseSpr.setPosition(node);\r\n            this.chooseNode = node;\r\n            this.setData(node.name);\r\n            hjm[this.type] = node.name;\r\n        // }\r\n    },\r\n\r\n    setData (name) {\r\n        cc.log(\"setData\");\r\n        dyl.data(this.type + \".\" + name, this.dataNode);\r\n        this.dataNode.hp = this.dataNode[this.type];\r\n        hjm[name] = this.dataNode.tool;\r\n    },\r\n\r\n    // atkOn () {\r\n    //     cc.log(\"atkOn\");\r\n    //     this.setType(\"atk\");\r\n    // },\r\n\r\n    // defOn () {\r\n    //     cc.log(\"defOn\");\r\n    //     this.setType(\"def\");\r\n    // },\r\n\r\n    nextOn () {\r\n        cc.log(\"nextOn\");\r\n        this.setPage(this.pageNum + 1);\r\n    },\r\n\r\n    // buyOn () {\r\n    //     cc.log(\"buyOn\");\r\n    //     if (this.chooseNode) {\r\n    //         if (this.chooseNode.has.active) {\r\n    //             return;\r\n    //         }\r\n    //         else if (this.chooseNode.notMoney.active) {\r\n    //             return;\r\n    //         }\r\n    //         else {\r\n    //             this.chooseNode.has.active = true;\r\n    //             let name = this.chooseNode.name;\r\n    //             this.toolTab[name] = true;\r\n    //             hjm[this.type + \"Arr\"].push(name);\r\n    //             hjm.coin -= this.chooseNode.coin;\r\n    //         }\r\n    //     }\r\n    // },\r\n\r\n    chooseOn (p) {\r\n        cc.log(\"chooseOn\");\r\n        let tool = p.in(...this.toolArr);\r\n        if (tool && tool.active) {\r\n            this.chooseTool(tool);\r\n        }\r\n    },\r\n\r\n    backOn (p) {\r\n        this.node.add(null, -0.3);\r\n    },\r\n\r\n    setType (type) {\r\n        cc.log(\"setType\");\r\n        this.type = type;\r\n        this.setArr(hjm[type + \"Arr\"]);\r\n        // this.chooseTool();\r\n    },\r\n\r\n    setArr (arr) {\r\n        cc.log(\"setArr\");\r\n        this.arr = arr;\r\n        this.setPage(0);\r\n    },\r\n\r\n    initTool (node, name) {\r\n        cc.log(\"initTool\");\r\n        dyl.data(this.type + \".\" + name, node);\r\n        hjm[name] = node.tool;\r\n        node.name = name;\r\n        // if (this.toolTab[name]) {\r\n        //     node.has.active = true;\r\n        //     node.notMoney.active = false;\r\n        // }\r\n        // else if (node.coin > hjm.coin) {\r\n        //     node.has.active = false;\r\n        //     node.notMoney.active = true;\r\n        // }\r\n        // else {\r\n        //     node.has.active = false;\r\n        //     node.notMoney.active = false;\r\n        // }\r\n        if (name === hjm[this.type]) {\r\n            this.chooseNode = node;\r\n        }\r\n\r\n    },\r\n\r\n    setPage (num) {\r\n        cc.log(\"setPage\");\r\n        if (num < 0) {\r\n            return false;\r\n        }\r\n        let maxShowNum = this.w * this.h;  \r\n        let id = maxShowNum * num;\r\n        if (id >= this.arr.length) {\r\n            return false;\r\n        }\r\n        this.pageNum = num;\r\n        if (id + maxShowNum > this.arr.length) {\r\n            for (let i = id; i < this.arr.length; i++) {\r\n                let node = this.toolArr[i];\r\n                node.active = true;\r\n                this.initTool(node, this.arr[i]);                \r\n            }\r\n\r\n            for (let i = this.arr.length; i < id + maxShowNum; i++) {\r\n                this.toolArr[i].active = false;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = id; i < id + maxShowNum; i++) {\r\n                let node = this.toolArr[i];\r\n                node.active = true;\r\n                this.initTool(node, this.toolArr[i]);\r\n            }\r\n        }\r\n        this.chooseTool(this.chooseNode);\r\n    },\r\n\r\n    initPosArr () {\r\n        cc.log(\"initPosArr\");\r\n        let {w, h} = this;\r\n        let size = dyl.getSize(this.toolLayer);\r\n        let wl = size.x / w;\r\n        let hl = size.y / h;\r\n        let oriX = -wl * (w - 1) * 0.5;\r\n        let oriY = hl * (h - 1) * 0.5 + this.toolLayer.y;\r\n        let posArr = [];\r\n        let toolArr = [];\r\n        dyl.addMap(w, h, (p)=>{\r\n            let {x, y} = p;\r\n            let n = y * w + x;\r\n            posArr[n] = cc.p(oriX + x * wl, oriY - y * hl);\r\n            let node = this.pool.add();\r\n            node.setPosition(posArr[n]);\r\n            node.active = false;\r\n            toolArr.push(node);\r\n        });\r\n        this.toolArr = toolArr;\r\n        this.posArr = posArr;\r\n    },\r\n\r\n    resetUi () {\r\n\r\n    },\r\n\r\n\r\n\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        mainDataNode: cc.Node,\r\n        buttonLayer: cc.Node,\r\n        toolData: cc.Node,\r\n    },\r\n\r\n    onLoad () {\r\n        this.atkSpr = this.buttonLayer.atk;\r\n        this.defSpr = this.buttonLayer.def;\r\n        let atk = hjm.atk;\r\n        hjm[atk] = this.atkSpr.tool;\r\n        let def = hjm.def;\r\n        hjm[def] = this.defSpr.tool;\r\n        let data = hjm.heroData;\r\n        for (let i in data) {\r\n            this.mainDataNode[i] = data[i];\r\n        }\r\n    },\r\n\r\n\r\n    touchOn (p) {\r\n        let arr = this.buttonLayer.getChildren();\r\n        let button = p.in(...arr);\r\n        if (button) {\r\n            this[button.name + \"On\"](p);\r\n        }\r\n    },\r\n\r\n    backOn (p) {\r\n        cc.log(\"data backOn\");\r\n        this.node.add(null, -0.3);\r\n    },\r\n\r\n    atkOn (p) {\r\n        this.toolData.add(null, 0.3);\r\n        this.toolData.setType(\"atk\");\r\n    },\r\n\r\n    defOn (p) {\r\n        this.toolData.add(null, 0.3);\r\n        this.toolData.setType(\"def\");\r\n    }\r\n\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    },\r\n\r\n    onLoad () {\r\n        this.node.type = \"def\";\r\n        let name = hjm.def;\r\n        // this.node.atk = dyl.data.atk[name];\r\n        // this.node.def = Number(dyl.data.def[name].def);\r\n        // dyl.defFun = dyl.data.def[name].fun;\r\n        dyl.data(\"def.\" + name, this.node);\r\n        ai.defFun = this.node.defFun;\r\n        hjm[name] = this.node.tool;\r\n        // let spr = this.node.getChildByName(\"spr\");\r\n        // cc.log(\"spr\", spr);\r\n        // cc.loader.loadRes(\"def/\" + name, cc.SpriteFrame, (err, sprr)=>{\r\n        // \tlet sprite = spr.getComponent(cc.Sprite);\r\n        // \tsprite.spriteFrame = sprr;\r\n        // \t// cc.log(\"end\");\r\n        // });\r\n        let spr = this.node.tool;\r\n        this.node.add = (end, top, dir, callBack)=>{\r\n        \t// cc.log(\"def add\");\r\n        \tspr.parent = top;\r\n        \tspr.setPosition(this.node);\r\n        \tlet time = 0.5;\r\n        \tlet move = cc.moveBy(time, dir);\r\n        \tlet fade = cc.fadeTo(time, 50);\r\n        \tlet scale = cc.scaleTo(time, 0.5);\r\n        \tlet spawn = cc.spawn(move, fade, scale);\r\n        \tlet cfun = cc.callFunc(()=>{\r\n        \t\tspr.opacity = 0;\r\n                callBack();\r\n        \t\tend();\r\n        \t});\r\n        \tlet seq = cc.sequence(spawn, cfun);\r\n        \tspr.runAction(seq);\r\n        }\r\n\r\n        this.node.reset = ()=>{\r\n        \t// cc.log(\"def reset\");\r\n        \tspr.parent = this.node;\r\n        \tspr.setPosition(0, 0);\r\n        \tspr.opacity = 255;\r\n        \tspr.setScale(1);\r\n        \t// spr.active = true;\r\n        }\r\n    },\r\n\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        isDebug: false\r\n    },\r\n\r\n    onLoad: function () {\r\n        let __isDebug = this.isDebug;\r\n        let __debugShowad = false;\r\n        let agent = null;\r\n        let ads_plugin = null;\r\n        if (!__isDebug) {\r\n            agent = anysdk.agentManager;\r\n            ads_plugin = agent.getAdsPlugin();\r\n            // ads_plugin.preloadAds(AdsType.AD_TYPE_REWARDEDVIDEO);\r\n            // this.log(typeof ads_plugin.callFuncWithParam);\r\n            ads_plugin.callFuncWithParam(\"preloadAd\");\r\n        }\r\n        else {\r\n            setTimeout(()=>{\r\n                __debugShowad = true;\r\n            }, 10000);\r\n        }\r\n\r\n        dyl.__adFun = ()=>{};\r\n        dyl.__isLoading = false;\r\n        let show = ()=>{\r\n            if (!__isDebug) {\r\n                let param = anysdk.PluginParam.create(\"gq4XnooZ4zAyQJPiva3\");\r\n                // var ads_plugin = agent.getAdsPlugin();\r\n                // var ads_plugin = this.ads_plugin;\r\n                ads_plugin.callFuncWithParam(\"showAd\", param);\r\n            }\r\n            else {\r\n                cc.log(\"假广告出来了，哈哈哈哈哈\");\r\n            }\r\n        }\r\n        dyl.addAd = (fun)=>{\r\n            if (fun) {\r\n                dyl.__adFun = fun;\r\n            }\r\n            let showad = null;\r\n            if (!__isDebug) {\r\n                let param0 = anysdk.PluginParam.create(\"gq4XnooZ4zAyQJPiva3\");\r\n                showad = ads_plugin.callBoolFuncWithParam(\"couldShowAd\", param0);\r\n            }\r\n            else {\r\n                showad = __debugShowad;\r\n            }\r\n            if (showad) {\r\n                show();\r\n                dyl.__adFun();\r\n                return true;\r\n            }\r\n            else {\r\n                if (dyl.__isLoading) {\r\n                    return false;\r\n                }\r\n                dyl.__isLoading = true;\r\n                cc.loader.loadRes(\"dylLoadingAd\", function (err, prefab) {\r\n                    let newNode = cc.instantiate(prefab);\r\n                    let canvas = cc.director.getScene().getChildren()[0];\r\n                    canvas.addChild(newNode);\r\n                });\r\n                return false;\r\n            }\r\n            return showad;\r\n        }\r\n    },\r\n});\r\n","var SceneEnum = cc.Enum({\r\n    Null: 0,\r\n    NextScene: 1,\r\n    NextLevel: 2,\r\n    Restart: 3,\r\n    ExitGame: 4,\r\n    Popup: 5,\r\n    Popdown: 6,\r\n})\r\ncc.Class({\r\n    extends: cc.Component,\r\n    editor: {\r\n        menu: \"dyl/按钮\",\r\n        executeInEditMode: true,\r\n    },\r\n    properties: {\r\n        audio: {\r\n            default: null,\r\n            url: cc.AudioClip,\r\n        },\r\n        touchFun: {\r\n            default: null,\r\n            type: cc.Component.EventHandler,\r\n        },\r\n\r\n        clearArr: [cc.String],\r\n\r\n        sceneType: {\r\n            default: SceneEnum.Null,\r\n            type: cc.Enum(SceneEnum),\r\n            notify() {\r\n                this._refresh();\r\n            }\r\n        },\r\n        nextScene: {\r\n            default: \"\",\r\n            visible: false\r\n        },\r\n        // popNode: {\r\n        //     default: null,\r\n        //     type: cc.Node,\r\n        //     visible: false,\r\n        // },\r\n        popEvent: {\r\n            default: null,\r\n            type: cc.Component.EventHandler,\r\n            visible: false\r\n        },\r\n\r\n\r\n        _flag: false,\r\n        _lastStr: \"\",\r\n        _inputStr: \"\",\r\n        _patch: \"\",\r\n        nodeName: {\r\n            default: \"\",\r\n            type: cc.String,\r\n            notify () {\r\n                if (this._flag) {\r\n                    this._flag = false;\r\n                    // return ;\r\n                }\r\n                this.updateNodeData();\r\n                this.changeStr();\r\n            }\r\n        }\r\n    },\r\n\r\n    _refresh: function () {\r\n        if (CC_EDITOR) {\r\n            cc.Class.Attr.setClassAttr(this, 'nextScene', 'visible', (this.sceneType === SceneEnum.NextScene));\r\n            cc.Class.Attr.setClassAttr(this, 'nodeName', 'visible', ((this.sceneType === SceneEnum.Popup) ||(this.sceneType === SceneEnum.Popdown)));\r\n            cc.Class.Attr.setClassAttr(this, 'popEvent', 'visible', ((this.sceneType === SceneEnum.Popup) ||(this.sceneType === SceneEnum.Popdown)));\r\n        }\r\n    },\r\n\r\n    onEnable: function () {\r\n        if (CC_EDITOR) {\r\n            this._refresh();\r\n            if (!this.audio && dyl.___audio) {\r\n                this.audio = dyl.___audio;\r\n            }\r\n            else if (this.audio && !dyl.___audio) {\r\n                dyl.___audio = this.audio;\r\n            }\r\n        }\r\n        else {\r\n            this.myInit();\r\n        }\r\n    },\r\n\r\n    myInit: function () {\r\n        let self = this;\r\n        let _color = this.node.color;\r\n        let _scale = this.node.getScale();\r\n        this.node.on('touchstart', function ( event ) {\r\n            // self.node.color = cc.color(125, 125, 125);\r\n            self.node.setScale(1.2 * _scale);\r\n        });  \r\n        this.node.on('touchend', function ( event ) {\r\n            // self.node.color = _color;\r\n            self.node.setScale(_scale);\r\n            self.onClick();\r\n        });  \r\n        this.node.on('touchcancel', function ( event ) {\r\n            // self.node.color = _color;\r\n            self.node.setScale(_scale);\r\n        }); \r\n    },\r\n\r\n    onClick: function () {\r\n        if (this.audio) {\r\n            cc.audioEngine.play(this.audio, false, 1);\r\n        }\r\n        if (this.touchFun && (this.touchFun.handler !== '')) {\r\n            this.touchFun.emit();\r\n        }\r\n\r\n        for (var i = this.clearArr.length - 1; i >= 0; i--) {\r\n            let name = this.clearArr[i];\r\n            dyl.save(name, null);\r\n        }\r\n\r\n        if (this.sceneType === SceneEnum.NextScene) {\r\n            return cc.director.loadScene(this.nextScene);\r\n        }\r\n        else if (this.sceneType === SceneEnum.NextLevel) {\r\n            let name = cc.director.getScene().name;\r\n            let num = name.replace(/[^0-9]/ig,\"\"); \r\n            let arr = name.split(num);\r\n            if (arr.length === 1) {\r\n                return cc.error(\"这个关卡命名有问题，不是只有一个数字\");\r\n            }\r\n            num = Number(num) + 1;\r\n            let nextName = arr[0] + String(num) + arr[1];\r\n            return cc.director.loadScene(nextName);\r\n        }\r\n        else if (this.sceneType === SceneEnum.ExitGame) {\r\n            if (cc.sys.isMobile){\r\n               return cc.director.end();\r\n            }\r\n            else if (cc.sys.isBrowser) {\r\n                window.opener=null;\r\n                window.open('','_self');\r\n                window.close();\r\n                return;\r\n            }\r\n            else if (cc.sys.isNative) {\r\n\r\n            }\r\n        }\r\n        else if (this.sceneType === SceneEnum.Restart) {\r\n            return cc.director.loadScene(cc.director.getScene().name);\r\n        }\r\n        else if (this.sceneType === SceneEnum.Popup) {\r\n            // let node = this.popNode;\r\n            if (this.nodeName === \"\") {\r\n                return cc.warn(\"按钮弹窗节点为空\");\r\n            }\r\n            let nodeName = \"_\" + this.nodeName.replace(\" \", \"\");\r\n            let node = hjm[nodeName];\r\n            node.stopAllActions();\r\n            node.active = true;\r\n            node.setScale(2);\r\n            node.opacity = 0;\r\n            let fun = ()=>{\r\n                if (this.popEvent && (this.popEvent.handler !== '')) {\r\n                    this.popEvent.emit();\r\n                }\r\n            }\r\n            let cfun = cc.callFunc(fun);\r\n            let fade = cc.fadeTo(0.3, 255);\r\n            let scale = cc.scaleTo(0.3, 1);\r\n            node.runAction(cc.sequence(cfun, cc.spawn(fade, scale)));\r\n        }\r\n        else if (this.sceneType === SceneEnum.Popdown) {\r\n            let node = this.popNode;\r\n            node.stopAllActions();\r\n            node.active = true;\r\n            node.setScale(1);\r\n            node.opacity = 255;\r\n            let fun = ()=>{\r\n                if (this.popEvent && (this.popEvent.handler !== '')) {\r\n                    this.popEvent.emit();\r\n                }\r\n                node.active = false;\r\n            }\r\n            let cfun = cc.callFunc(fun);\r\n            let fade = cc.fadeTo(0.3, 0);\r\n            let scale = cc.scaleTo(0.3, 2);\r\n            node.runAction(cc.sequence(cc.spawn(fade, scale), cfun));\r\n        }\r\n    },\r\n\r\n//下面button弹窗的节点字符串\r\n\r\n    nextStr: function () {\r\n        if (this._inputStr === \"\") {\r\n            return this.setNodeName(\"\");\r\n        }\r\n        let now = this._inputStr + this._patch;\r\n        let arr = this.getNodeNameArr;\r\n        let ans = \"\";\r\n        let nowId = 0;\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            let tmpArr = arr[i].split(this._inputStr);\r\n            if (tmpArr.length > 1 && tmpArr[0] === \"\") {\r\n                if (arr[i] === now) {\r\n                    nowId = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = (i + nowId + 1) % arr.length;\r\n            let tmpArr = arr[j].split(this._inputStr);\r\n            if (tmpArr.length > 1 && tmpArr[0] === \"\") {\r\n                ans = arr[j];\r\n                break;\r\n            }\r\n        }\r\n        this._patch = ans.slice(this._inputStr.length);\r\n        let str = this._inputStr + \" \" + this._patch;\r\n        this._lastStr = str;\r\n        this.setNodeName(str);\r\n    },\r\n\r\n    changeStr: function () {\r\n        let last = this._lastStr;\r\n        let now = this.nodeName;\r\n        if (now.length > last.length) {\r\n            // cc.log(typeof now, now);\r\n            let add = now.slice(last.length);\r\n            if (add === \" \") {\r\n                return this.nextStr();\r\n            }\r\n            let input = this._inputStr + add;\r\n            // let patch = this.getPatch(input);\r\n            // if (!patch) {\r\n            //     // this.nodeName = this._lastStr;\r\n            //     this.setNodeName(this._lastStr);\r\n            //     return;\r\n            // }\r\n            // input = this._inputStr.slice(0, this._inputStr.length - delNum);\r\n            let patch = false;\r\n            while (true) {\r\n                patch = this.getPatch(input);\r\n                if (typeof patch === \"string\") {\r\n                    break;\r\n                }\r\n                input = input.slice(0, input.length - 1);\r\n            }\r\n            this._inputStr = input;\r\n            this._patch = patch;\r\n            let str = input + \" \" + patch;\r\n            if (str === \" \") {\r\n                str = \"\";\r\n            }\r\n            this._lastStr = str;\r\n            this.setNodeName(str);\r\n        }\r\n        else if (now.length < last.length) {\r\n            let delNum = last.length - now.length;\r\n            let input = this._inputStr;\r\n            if (delNum >= input.length) {\r\n                this._inputStr = \"\";\r\n                this._lastStr = \"\";\r\n                this.setNodeName(\"\");\r\n                return;\r\n            }\r\n            let patch = false;\r\n            input = this._inputStr.slice(0, this._inputStr.length - delNum);\r\n            while (true) {\r\n                patch = this.getPatch(input);\r\n                if (typeof patch === \"string\") {\r\n                    break;\r\n                }\r\n                input = input.slice(0, input.length - 1);\r\n            }\r\n            // if (!patch) {\r\n            //     // this.nodeName = this._lastStr;\r\n            //     this.setNodeName(this._lastStr);\r\n            //     return;\r\n            // }\r\n            // cc.log(\"3\");\r\n            this._inputStr = input;\r\n            this._patch = patch;\r\n            let str = input + \" \" + patch;\r\n            if (str === \" \") {\r\n                str = \"\";\r\n            }\r\n            this._lastStr = str;\r\n            this.setNodeName(str);\r\n        }\r\n    },\r\n\r\n    setNodeName: function (str) {\r\n        this._flag = true;\r\n        this.nodeName = str;\r\n        this._flag = false;\r\n    },\r\n\r\n    getPatch: function (input) {\r\n        let arr = this.getNodeNameArr;\r\n        if (input === \"\") {\r\n            return \"\";\r\n        }\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let str = arr[i];\r\n            let tmpArr = str.split(input);\r\n            if (tmpArr.length > 1 && tmpArr[0] === \"\") {\r\n                let ans = str.slice(input.length);\r\n                // cc.log(\"ans\", ans, typeof ans);\r\n                return ans;\r\n            }\r\n        }\r\n        return false;\r\n    },  \r\n\r\n    updateNodeData: function () {\r\n        let arr = [];\r\n        let fun = function (node) {\r\n            if (node.name[0] === \"_\") {\r\n                arr.push(node.name.slice(1));\r\n            }\r\n            let nodeArr = node.getChildren();\r\n            for (var i = nodeArr.length - 1; i >= 0; i--) {\r\n                fun(nodeArr[i]);\r\n            }\r\n        }\r\n        if (CC_EDITOR) {\r\n            var node = cc.director.getScene().getChildren()[0];\r\n            fun(node);\r\n        }\r\n        this.getNodeNameArr = arr;\r\n    },\r\n\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n    editor: {\r\n        menu: \"dyl/结束画面\",\r\n    },\r\n    properties: {\r\n        stateNodeArr: [cc.Node],\r\n    },\r\n\r\n    __preload: function () {\r\n        this.node.add = (name)=>this.onClick(name);\r\n        let arr = this.stateNodeArr;\r\n        for (var i = arr.length - 1; i >= 0; i--) {\r\n            this[arr[i].name] = arr[i];\r\n            arr[i].active = false;\r\n        }\r\n    },\r\n\r\n    onClick: function (name) {\r\n        if (name) {\r\n            this[name].active = true;\r\n        }\r\n        let node = this.node;\r\n        node.stopAllActions();\r\n        node.active = true;\r\n        node.setScale(2);\r\n        node.opacity = 0;\r\n        // let cfun = cc.callFunc(fun);\r\n        let fade = cc.fadeTo(0.3, 255);\r\n        let scale = cc.scaleTo(0.3, 1);\r\n        node.runAction(cc.spawn(fade, scale));\r\n    },\r\n\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n    editor: {\r\n        menu: \"dyl/飙血\",\r\n    },\r\n\r\n    __preload: function () {\r\n        this.initHpLayer();\r\n    },\r\n\r\n    initHpLayer: function () {\r\n        let thisNode = this.node;\r\n        let node = this.node.getChildren()[0];\r\n        // node.__lab = node.getComponent(cc.Label);\r\n        node.__lab = node.getChildren()[0].getComponent(cc.Label);\r\n        node.active = false;\r\n\r\n        let pool = [];\r\n        let delPool = [];\r\n\r\n        delPool.push(node);\r\n        node.del = function () {\r\n            this.active = false;\r\n            delPool.push(this);\r\n            let id = this.__poolId;\r\n            pool[id] = pool[pool.length - 1];\r\n            pool[id].__poolId = id;\r\n            pool.length = pool.length - 1;\r\n            this.__poolId = null;\r\n        }\r\n\r\n        let add = function () {\r\n            let node = null;\r\n            if (delPool.length < 1) {\r\n                cc.log(\"delPool < 1\");\r\n                node = cc.instantiate(pool[0]);\r\n                node.parent = thisNode;\r\n                node.__lab = node.getChildren()[0].getComponent(cc.Label);\r\n\r\n                node.del = function () {\r\n                    this.active = false;\r\n                    delPool.push(this);\r\n                    let id = this.__poolId;\r\n                    pool[id] = pool[pool.length - 1];\r\n                    pool[id].__poolId = id;\r\n                    pool.length = pool.length - 1;\r\n                    this.__poolId = null;\r\n                }\r\n            }\r\n            else {\r\n                cc.log(\"delPool > 0\");\r\n                node = delPool[delPool.length - 1];\r\n                delPool.length = delPool.length - 1;\r\n                node.active = true;\r\n            }\r\n            node.__poolId = pool.length;\r\n            pool.push(node);\r\n            cc.log(\"delPool\", node);\r\n            return node;\r\n        };\r\n\r\n        this.node.add = function (p, num) {\r\n            let color = null;\r\n            num = Math.floor(num);\r\n            // if (num > 0) {\r\n            //     color = cc.color(0, 255, 0);\r\n            // }\r\n            // else if (num === 0) {\r\n            //     color = cc.color(255, 255, 255);\r\n            // }\r\n            // else {\r\n            //     color = cc.color(255, 0, 0);\r\n            // }\r\n            let node = add();\r\n            node.setScale(0);\r\n            node.stopAllActions();\r\n            // node.color = color;\r\n            node.setPosition(p);\r\n            node.__lab.string = String(num);\r\n            // let moveBy = cc.moveBy(0.6, cc.p(0, 200));\r\n            let scale1 = cc.scaleTo(0.1, 1.15);\r\n            let scale2 = cc.scaleTo(0.3, 1);\r\n            // let scale3 = cc.scaleTo(0.2, 1);\r\n            let cfun = cc.callFunc(()=>{\r\n                node.del();\r\n            })\r\n            let seq = cc.sequence(scale1, scale2, cfun);\r\n            node.runAction(seq);\r\n        };\r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n    editor: {\r\n        menu: \"dyl/文字\",\r\n    },\r\n    properties: {\r\n    },\r\n\r\n    __preload: function () {\r\n        this.initLab();\r\n    },\r\n\r\n    initLab: function () {\r\n        let arr = this.node.getChildren();\r\n        for (var i = arr.length - 1; i >= 0; i--) {\r\n            let node = arr[i];\r\n            let name = node.name;\r\n            if (!node.getComponent(cc.Label)) {\r\n                this.node[name] = node;\r\n                continue;\r\n            }\r\n            this.node[\"__lab\" + name] = node.getComponent(cc.Label);\r\n            if (typeof this.node[name] !== \"undefined\") {\r\n                this.node[\"__\" + name] = this.node[name];\r\n            }\r\n            else {\r\n                this.node[\"__\" + name] = this.node[\"__lab\" + name].string;\r\n            }\r\n            Object.defineProperty(this.node, name, {\r\n                get: function () {\r\n                    return this[\"__\" + name];\r\n                },\r\n                set: function (data) {\r\n                    if (typeof data === \"number\" && this[\"__\" + name] !== data) {\r\n                        // cc.log(typeof this[\"__\" + name], typeof data, this[\"__\" + name], data);\r\n                        let lab = this[\"__lab\" + name].node;\r\n                        lab.scaleChangeId = lab.scaleChangeId ? lab.scaleChangeId + 1 : 1;\r\n                        lab.setScale(1.2);\r\n                        setTimeout(()=>{\r\n                            lab.scaleChangeId--;\r\n                            if (!lab.scaleChangeId) {\r\n                                if (cc.isValid(lab)) {\r\n                                    lab.setScale(1);\r\n                                }\r\n                            }\r\n                        }, 100);\r\n                    }\r\n                    this[\"__\" + name] = data;\r\n                    this[\"__lab\" + name].string = String(this[\"__\" + name]);\r\n                }\r\n            })  \r\n            this.node[name] = this.node[\"__\" + name];\r\n        }\r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        d: 150,\r\n        cd: 2,\r\n        h: 400,\r\n    },\r\n\r\n    onLoad: function () {\r\n        let top = this.node.getChildByName(\"arr\");\r\n        let nodeArr = top.getChildren();\r\n        let oriX = -(nodeArr.length - 1) * 0.5 * this.d;\r\n        for (var i = nodeArr.length - 1; i >= 0; i--) {\r\n            nodeArr[i].x = i * this.d + oriX;\r\n        }\r\n        this.nodeArr = nodeArr;\r\n        // cc.log(this.nodeArr);\r\n        this.r = 0;\r\n\r\n        this.initTouch();\r\n    },\r\n\r\n    initTouch: function () {\r\n        this.node.on(\"touchstart\", ()=>{\r\n            // if (this.node.endFun) {\r\n            //     this.node.endFun();\r\n            // }\r\n            this.node.destroy();\r\n            dyl.__isLoading = false;\r\n        });\r\n    },\r\n\r\n    update: function (dt) {\r\n        this.r = this.r + (dt / this.cd);\r\n        for (var i = this.nodeArr.length - 1; i >= 0; i--) {\r\n            let node = this.nodeArr[i];\r\n            let r = this.r + i * (8 / this.nodeArr.length);\r\n            this.nodeArr[i].y = Math.sin(r) * this.h;\r\n        }\r\n        if (dyl.addAd()) {\r\n            this.node.active = false;\r\n            this.node.destroy();\r\n            // dyl.__adFun();\r\n            dyl.__isLoading = false;\r\n        }\r\n    },\r\n});\r\n","let Effect = cc.Enum({\r\n    Null: 0,\r\n    SmallBig: 1,\r\n    Red: 2,\r\n    Shake: 3,\r\n});\r\n\r\nlet LoadData = cc.Class({\r\n    name: \"LoadData\",\r\n    properties: {\r\n        path: \"\",\r\n        loadArrName: \"\",\r\n        parent: cc.Node,\r\n        callBack: {\r\n            default: function() {\r\n                return new cc.Component.EventHandler;\r\n            },\r\n            type: cc.Component.EventHandler,\r\n        }\r\n    }\r\n});\r\n\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n    editor: {\r\n        menu: \"dyl/多功能\",\r\n        executeInEditMode: true,\r\n    },\r\n    properties: {\r\n    \t// rand: 0,\r\n        // isBindNode: false,\r\n        touch: \"\", \r\n        // run: false,\r\n        // act: {\r\n        //     default: Effect.Null,\r\n        //     type: cc.Enum(Effect)\r\n        // },\r\n        isPhysics: {\r\n            default: false,\r\n            notify() {\r\n                this._refresh();\r\n            }\r\n        },\r\n        isShowDebug: {\r\n        \tdefault: false,\r\n        \tvisible: false,\r\n        },\r\n        gravity: {\r\n        \tdefault: cc.p(0, -320),\r\n        \tvisible: false,\r\n        },\r\n\r\n        isLoad: {\r\n            default: false,\r\n            notify() {\r\n                this._refresh();\r\n            },\r\n            visible: false\r\n        },\r\n\r\n        loadDataArr: { // 是dyl 后面的变量，一个数组，代表要加载的内容\r\n            default: [],\r\n            type: LoadData,\r\n            visible: false,\r\n            notify(){\r\n                for (let i = 0; i < this.loadDataArr.length; i++) {\r\n                    let callBack = this.loadDataArr[i].callBack;\r\n                    if (!callBack.target) {\r\n                        callBack.target = this.node;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        loadDataCallBack: { //加载完后的函数，一般是启动函数\r\n            default: function() {\r\n                return new cc.Component.EventHandler;\r\n            },\r\n            type: cc.Component.EventHandler,\r\n            visible: false\r\n        }, \r\n\r\n        // loadData: {\r\n        //     default: \"\", \r\n        //     visible: false,\r\n        // },\r\n\r\n        // loadAfterFun: {\r\n        //     default: null,\r\n        //     type: cc.Component.EventHandler,\r\n        //     visible: false\r\n        // },\r\n\r\n        // if (this.popEvent && (this.popEvent.handler !== '')) {\r\n        //     this.popEvent.emit();\r\n        // }\r\n    },\r\n\r\n    _refresh: function () {\r\n        if (CC_EDITOR) {\r\n            // cc.log(1);\r\n            cc.Class.Attr.setClassAttr(this, 'isShowDebug', 'visible', this.isPhysics);\r\n            // cc.log(2);\r\n            cc.Class.Attr.setClassAttr(this, 'gravity', 'visible', this.isPhysics);\r\n            // cc.log(3);\r\n            // cc.Class.Attr.setClassAttr(this, 'loadData', 'visible', this.isLoad);\r\n            // cc.log(4);\r\n            // cc.Class.Attr.setClassAttr(this, 'loadAfterFun', 'visible', this.isLoad);\r\n            // cc.log(5);\r\n            cc.Class.Attr.setClassAttr(this, 'loadDataArr', 'visible', this.isLoad);\r\n            // cc.log(6);\r\n            cc.Class.Attr.setClassAttr(this, 'loadDataCallBack', 'visible', this.isLoad);\r\n            // cc.log(\"_refresh\");\r\n        }\r\n    },\r\n\r\n    __preload: function () {\r\n        // dyl.dyl = [\"sprs\"];\r\n        // dyl.hjm = [\"lab1\", \"lab2\", \"lab3\"];\r\n        if (CC_EDITOR) {\r\n            // setTimeout(()=>this._refresh(), 100);\r\n            if (!this.loadDataCallBack.target) {\r\n                this.loadDataCallBack.target = this.node;\r\n            }\r\n            this._refresh();\r\n        }\r\n        else {\r\n            this.myInit();\r\n        }\r\n    },\r\n\r\n    emitCallBack: function(callBack, data) {\r\n        let js = callBack.target.getComponent(callBack.component);\r\n        js && js[callBack.handler] && js[callBack.handler](data);\r\n    },\r\n\r\n    onEnable: function () {\r\n    },\r\n \r\n    initPhysics: function () {\r\n        if (!this.isPhysics) {\r\n            return;\r\n        }\r\n        cc.director.getPhysicsManager().enabled = true;\r\n        if (this.isShowDebug) {\r\n            cc.director.getPhysicsManager().debugDrawFlags = cc.PhysicsManager.DrawBits.e_aabbBit |\r\n                cc.PhysicsManager.DrawBits.e_pairBit |\r\n                cc.PhysicsManager.DrawBits.e_centerOfMassBit |\r\n                cc.PhysicsManager.DrawBits.e_jointBit |\r\n                cc.PhysicsManager.DrawBits.e_shapeBit;\r\n        }\r\n        else {\r\n            cc.director.getPhysicsManager().debugDrawFlags = 0;\r\n        }\r\n        cc.director.getPhysicsManager().gravity = this.gravity;\r\n    },\r\n\r\n    myInit: function () {\r\n        if (this.isLoad) {\r\n            this.setLoad();\r\n        }\r\n        this.initPhysics();\r\n        // if (this.act !== Effect.Null) {\r\n        //     this.setAct();\r\n        // }\r\n        // if (this.isBindNode) {\r\n        //     this.bindNode(cc.director.getScene().getChildren()[0]);\r\n        // }\r\n        if (this.touch !== \"\") {\r\n            this.setTouch();\r\n        }\r\n        // if (this.run) {\r\n        //     this.setRun();\r\n        // }\r\n        // if (this.rand) {\r\n        // \tthis.setRand();\r\n        // }\r\n    },\r\n\r\n    loadArr: function(path, loadArrName, parent, callBack, endFun) {\r\n        let arr = dyl[loadArrName];\r\n        let ansArr = [];\r\n        if (arr.length === 0) {\r\n            // callBack(ansArr);\r\n            this.emitCallBack(callBack, ansArr);\r\n            return;\r\n        }\r\n        let num = arr.length;\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            let name = arr[i];\r\n            if (path !== \"\") {\r\n                name = path + \"/\" + name;\r\n\r\n            }\r\n            cc.loader.loadRes(name, (err, prefab)=>{\r\n                let node = cc.instantiate(prefab);\r\n                ansArr[i] = node;\r\n                node.parent = parent;\r\n                num--;\r\n                if (num === 0) {\r\n                    this.emitCallBack(callBack, ansArr);\r\n                    endFun();\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    setLoad: function() {\r\n        let num = this.loadDataArr.length;\r\n        for (let i = 0; i < this.loadDataArr.length; i++) {\r\n            let {path, loadArrName, parent, callBack} = this.loadDataArr[i];\r\n            this.loadArr(path, loadArrName, parent, callBack, ()=>{\r\n                num--;\r\n                if (num === 0) {\r\n                    this.emitCallBack(this.loadDataCallBack, null);\r\n                }\r\n            })\r\n        }\r\n    },\r\n\r\n\r\n    // setLoad: function () {\r\n    // \tthis.__loadEnd = false;\r\n    //     let arr = dyl[this.loadData];\r\n    //     let data = {};\r\n    //     let ans = [];\r\n    //     let num = arr.length;\r\n\r\n    //     let loadFunArr = [];\r\n\r\n    //     this.node.load = (fun)=>{\r\n    //     \tif (this.__loadEnd) {\r\n    //     \t\treturn fun(ans);\r\n    //     \t}\r\n    //     \telse {\r\n    //         \tloadFunArr.push(fun);\r\n    //     \t}\r\n    //     \treturn;\r\n    //     }\r\n\r\n    //     let endLoad = ()=>{\r\n    //         for (let i = loadFunArr.length - 1; i >= 0; i--) {\r\n    //             loadFunArr[i](ans);\r\n    //         }\r\n    //         if (this.loadAfterFun && (this.loadAfterFun.handler !== '')) {\r\n    //             this.loadAfterFun.emit();\r\n    //         }\r\n    //     }\r\n\r\n    //     for (let i = arr.length - 1; i >= 0; i--) {\r\n    //         let name = arr[i];\r\n    //         if (data[name]) {\r\n    //             let node = cc.instantiate(data[name]);\r\n    //             ans[i] = node;\r\n    //             num--;\r\n    //             if (num === 0) {\r\n    //                 endLoad();\r\n    //             }\r\n    //         }\r\n    //         else {\r\n    //             cc.loader.loadRes(name, (err, prefab)=>{\r\n    //                 data[name] = prefab;\r\n    //                 let node = cc.instantiate(prefab);\r\n    //                 ans[i] = node;\r\n    //                 num--;\r\n    //                 if (num === 0) {\r\n    //                     this.scheduleOnce(endLoad, 0);\r\n    //                 }\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     this.__loadData = data;\r\n    // },\r\n\r\n    onDestroy: function () {    \r\n        let data = this.__loadData;\r\n        for (let i in data) {\r\n            cc.loader.releaseRes(i);\r\n        }\r\n    },\r\n\r\n    bindNode: function (node) {\r\n        if (node.name[0] === \"_\") {\r\n            this.node[node.name] = node;\r\n        }\r\n        let arr = node.getChildren();\r\n        for (var i = arr.length - 1; i >= 0; i--) {\r\n            this.bindNode(arr[i]);\r\n        }\r\n    },\r\n\r\n    setTouch: function () {\r\n        let node = this.node;\r\n        if (!this.node.touch) {\r\n            this.node.touch = \"touch\";\r\n        }\r\n        let js = this.node.getComponent(this.touch);\r\n        let nowTouchState = this.node.touch;\r\n\r\n        let fun = function (event){\r\n            let pos = event.getLocation();\r\n            pos = cc.p(node.convertToNodeSpace(pos));\r\n            let size = node.getContentSize();\r\n            let [w, h] = [size.width, size.height];\r\n            [w, h] = [w / 2, h / 2];\r\n            pos.subSelf(cc.p(w, h));\r\n\r\n            pos.in = function () { //判断当前节点是否在node里面\r\n                let {x, y} = this;\r\n                let checkIn = function (node) {\r\n                    if (!node) {\r\n                        return null;\r\n                    }\r\n                    node = node.node ? node.node : node;\r\n                    let [nx, ny] = [node.x, node.y];\r\n                    let size = node.getContentSize();\r\n                    let [w, h] = [size.width, size.height];\r\n                    [w, h] = [w / 2, h / 2];\r\n                    w = Math.abs(node.scaleX * w);\r\n                    h = Math.abs(node.scaleY * h);\r\n                    // cc.log(x, y, nx, ny, w, h);\r\n                    return (x >= (nx - w) && x < (nx + w) && y >= (ny - h) && y < (ny + h));\r\n                };\r\n                let len = arguments.length;\r\n                for (let i = 0; i < len; i++) {\r\n                    if (checkIn(arguments[i])) {\r\n                        return arguments[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            return pos;\r\n        };\r\n\r\n        let data = {};\r\n        this.node.on(\"touchstart\", function (event) {\r\n            if (!node.touch) {\r\n                data = null;\r\n                return null;\r\n            }\r\n            nowTouchState = node.touch;\r\n            let pos = fun(event);\r\n            if (js[node.touch + \"On\"]) {\r\n                data = js[node.touch + \"On\"](pos);\r\n            }\r\n            else {\r\n                data = {};\r\n            }\r\n        })\r\n\r\n        this.node.on (\"touchmove\", function (event) {\r\n            if (!data) {\r\n                return null;\r\n            }\r\n            if (nowTouchState !== node.touch) {\r\n                return null;\r\n            }\r\n            let pos = fun(event);\r\n            if (js[node.touch + \"Move\"]) {\r\n                data = js[node.touch + \"Move\"](pos, data);\r\n            }\r\n            else {\r\n                data = {};\r\n            }\r\n        }, this);\r\n\r\n        this.node.on (\"touchend\", function (event) {\r\n            if (!data) {\r\n                return null;\r\n            }\r\n            if (nowTouchState !== node.touch) {\r\n                return null;\r\n            }\r\n            let pos = fun(event);\r\n            if (js[node.touch + \"End\"]) {\r\n                data = js[node.touch + \"Up\"](pos, data);\r\n                return;\r\n            }\r\n            if (js[node.touch + \"Up\"]) {\r\n                data = js[node.touch + \"Up\"](pos, data);\r\n            }\r\n            else {\r\n                data = {};\r\n            }\r\n        }, this);\r\n\r\n        this.node.on (\"touchcancel\", function (event) {\r\n            if (!data) {\r\n                return null;\r\n            }\r\n            if (nowTouchState !== node.touch) {\r\n                return null;\r\n            }\r\n            let pos = fun(event);\r\n            if (js[node.touch + \"End\"]) {\r\n                data = js[node.touch + \"Up\"](pos, data);\r\n                return;\r\n            }\r\n            if (js[node.touch + \"Out\"]) {\r\n                data = js[node.touch + \"Out\"](pos, data);\r\n            }\r\n            else {\r\n                data = {};\r\n            }\r\n        }, this);\r\n    },\r\n\r\n    setRun: function () {\r\n        let self = this;\r\n        this.node.run = function () {\r\n            let root = function (){};\r\n            let node0 = arguments[0];\r\n            let createFun = function (act, endFun) {\r\n                // let fun = endFun;\r\n                let fun = function () {\r\n                    act();\r\n                    endFun();\r\n                }        \r\n                return fun; \r\n            };\r\n            let createJsFun = function (act, endFun) {\r\n                // let fun = endFun;\r\n                let fun = function () {\r\n                    self.node.js[act]();\r\n                    endFun();\r\n                }        \r\n                return fun; \r\n            };\r\n            let createArr = function (act, endFun) {\r\n                let fun = function () {\r\n                // let counter = dyl.counter(endFun);\r\n                    let arr = act;\r\n                    arr.push(()=>null);\r\n                    let counterNum = arr.length;\r\n                    let delFun = ()=>{\r\n                        counterNum--;\r\n                        if (counterNum <= 0) {\r\n                            endFun();\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < arr.length; i++) {\r\n                        create(arr[i], ()=>{\r\n                            // counter.del();\r\n                            delFun();\r\n                        })();\r\n                    }\r\n                }\r\n                return fun;\r\n            };\r\n            let createOther = function (act, endFun) {\r\n                // cc.log(\"createOther\", act.node);\r\n                let fun = function () {\r\n                    let node = act.node;\r\n                    if (node.node) {\r\n                        node = node.node;\r\n                    }\r\n                    if (act.add && (act.add > 0)) {\r\n                        act.easing(cc.easeIn(act.add));\r\n                    }\r\n                    else if (act.add && (act.add < 0)) {\r\n                        let inout = cc.easeInOut(-act.add);\r\n                    // cc.log(\"iiiiii\", -act.add, inout);\r\n                        act.easing(cc.easeInOut(-act.add));\r\n                    }\r\n                    let cfun = cc.callFunc(()=>{\r\n                        endFun();\r\n                    });\r\n                    let seq = cc.sequence(act, cfun);\r\n                    node.runAction(seq);\r\n                }\r\n                return fun;\r\n            };\r\n            let createMove = function (act, endFun) {\r\n                let fun = function () {\r\n                    let node = node0;\r\n                    if (node.node) {\r\n                        node = node.node;\r\n                    }\r\n                    if (act.add && (act.add > 0)) {\r\n                        act.easing(cc.easeIn(act.add));\r\n                    }\r\n                    else if (act.add && (act.add < 0)) {\r\n                        let inout = cc.easeInOut(-act.add);\r\n                    // cc.log(\"iiiiii\", -act.add, inout);\r\n                        act.easing(cc.easeInOut(-act.add));\r\n                    }\r\n                    let cfun = cc.callFunc(endFun);\r\n                    let seq = cc.sequence(act, cfun);\r\n                    node.runAction(seq);\r\n                }\r\n                return fun;\r\n            };\r\n            let createDelay = function (act, endFun) {\r\n                let fun = function () {\r\n                    let node = node0;\r\n                    if (node.node) {\r\n                        node = node.node;\r\n                    }\r\n                    let delay = cc.delayTime(act);\r\n                    let cfun = cc.callFunc(endFun);\r\n                    let seq = cc.sequence(delay, cfun);\r\n                    node.runAction(seq);\r\n                }   \r\n                return fun;\r\n            };\r\n            let create = function (act, endFun) {\r\n                // cc.log(act, act.node);\r\n                if (typeof act === \"function\") {\r\n                    return createFun(act, endFun);\r\n                }\r\n                else if (typeof act === \"number\") {\r\n                    return createDelay(act, endFun);\r\n                }\r\n                else if (typeof act === \"string\") {\r\n                    return createJsFun(act, endFun);\r\n                }\r\n                else if (Array.isArray(act)) {\r\n                    return createArr(act, endFun);\r\n                }\r\n                else if (act.node) {\r\n                    return createOther(act, endFun);\r\n                }\r\n                else {\r\n                    return createMove(act, endFun);\r\n                }\r\n            };\r\n            for (let i = arguments.length - 1; i > 0; i--) {\r\n            // cc.log(\"arg\", i);\r\n                let act = arguments[i];\r\n                root = create(act, root);\r\n            }\r\n        // cc.log(\"root\", root);\r\n            root();\r\n        }\r\n    },\r\n\r\n    setRand: function () {\r\n    \tlet __randNum = this.rand;\r\n    \tlet maxNum = 4671341;\r\n    \tthis.node.rand = function (n) {\r\n    \t\t__randNum = (30853 * __randNum + 253) % maxNum;\r\n    \t\tlet r = __randNum / maxNum;\r\n    \t\tif (n) {\r\n    \t\t\treturn Math.floor(r * n);\r\n    \t\t}\r\n    \t\telse {\r\n    \t\t\treturn r;\r\n    \t\t}\r\n    \t}\r\n    \tthis.node.rand.set = function (num) {\r\n    \t\t__randNum = num;\r\n    \t}\r\n    },\r\n\r\n    setAct: function () {\r\n        let __oriScale = this.node.getScale();\r\n        let {r, g, b} = this.node.color;\r\n        let __oriColor = cc.color(r, g, b);\r\n        let __seq = null;\r\n        let __red = 0;\r\n\r\n\r\n        this.node.act = ()=>{\r\n            if (this.act === Effect.SmallBig) {\r\n                if (__seq) {\r\n                    this.node.stopAction(__seq);\r\n                    this.node.setScale(__oriScale);\r\n                }\r\n                let scale1 = cc.scaleTo(0.2, 1.2 * __oriScale);\r\n                scale1.easing(cc.easeQuadraticActionInOut());\r\n                let scale2 = cc.scaleTo(0.2, 1 * __oriScale);\r\n                scale2.easing(cc.easeQuadraticActionInOut());\r\n                let cfun = cc.callFunc(()=>{\r\n                    __seq = null;\r\n                })\r\n                let seq = cc.sequence(scale1, scale2, cfun);\r\n                __seq = seq;\r\n                this.node.runAction(seq);\r\n            }\r\n            else if (this.act === Effect.Red) {\r\n                __red++;\r\n                this.node.color = cc.color(255, 0, 0);\r\n                setTimeout(()=>{\r\n                    __red--;\r\n                    if (!__red) {\r\n                        if (cc.isValid(this.node)) {\r\n                            this.node.color = __oriColor;\r\n                        }\r\n                    }\r\n                }, 60);\r\n            }\r\n            else if (this.act === Effect.Shake) {\r\n                \r\n            }\r\n        }\r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n    editor: {\r\n        menu: \"dyl/对象池\",\r\n    },\r\n    properties: {\r\n    },\r\n\r\n    __preload: function () {\r\n        this.initPool();\r\n    },\r\n\r\n    initPool: function () {\r\n        let node = this.node.getChildren()[0];\r\n        node.active = false;\r\n\r\n        let pool = [];\r\n        let delPool = [];\r\n\r\n        delPool.push(node);\r\n        node.del = function () {\r\n            this.active = false;\r\n            delPool.push(this);\r\n            let id = this.__poolId;\r\n            pool[id] = pool[pool.length - 1];\r\n            pool[id].__poolId = id;\r\n            pool.length = pool.length - 1;\r\n            this.__poolId = null;\r\n        }\r\n\r\n        this.node.add = function () {\r\n            // cc.log(\"addd\");\r\n            let node = null;\r\n            if (delPool.length < 1) {\r\n                node = cc.instantiate(pool[0]);\r\n                node.parent = this;\r\n\r\n                node.del = function () {\r\n                    this.active = false;\r\n                    delPool.push(this);\r\n                    let id = this.__poolId;\r\n                    pool[id] = pool[pool.length - 1];\r\n                    pool[id].__poolId = id;\r\n                    pool.length = pool.length - 1;\r\n                    this.__poolId = null;\r\n                }\r\n            }\r\n            else {\r\n                // cc.log(\"大于1\");\r\n                node = delPool[delPool.length - 1];\r\n                delPool.length = delPool.length - 1;\r\n                node.active = true;\r\n            }\r\n            node.__poolId = pool.length;\r\n            pool.push(node);\r\n            // cc.log(\"成功添加\");\r\n            return node;\r\n        }\r\n        this.node.pool = pool;\r\n    },\r\n\r\n});\r\n","\"use strict\";\r\n\r\n// var cc = {};\r\n\r\n// dyl = dyl ? dyl : {};\r\n// if (!window.dyl) {\r\n//     window.dyl = {};\r\n// }\r\n\r\n// cc.Class({\r\n//     extends: cc.Component,\r\n\r\n//     properties: {\r\n//     },\r\n\r\n//     __preload () {\r\n//         this.dylInit();\r\n//         // let data = dyl.data.enData[name];\r\n//         // this.node.hp = Number(data.hp);\r\n//         // this.node.def = Number(data.def);\r\n//         // this.node.atk = Number(data.atk);\r\n//         // this.node.atkFun = data.atkFun;\r\n//         // this.node.defFun = data.defFun;\r\n//     },\r\n\r\n\r\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\r\n\r\nwindow.initDylFun = function (cryptoJS) {\r\n    cc.log(\"initDylFun\", cryptoJS);\r\n    window.dyl = window.dyl || {};\r\n    window.dyl.__debug = {};\r\n    Object.defineProperty(dyl, \"debug\", {\r\n        get: function get() {\r\n            return this.__debug[\"default\"];\r\n        },\r\n        set: function set(str) {\r\n            var arr = str.split(\" \");\r\n            this.__debug[arr[0]] = arr[arr.length - 1];\r\n            this.__debug[\"default\"] = arr[arr.length - 1];\r\n            cc.log(\"scene name = \", cc.director.getScene().name);\r\n            cc.director.loadScene(cc.director.getScene().name);\r\n        }\r\n    });\r\n\r\n    dyl.getSize = function (node) {\r\n        node = node.node ? node.node : node;\r\n        var size = node.getContentSize();\r\n        var w = size.width;\r\n        var h = size.height;\r\n\r\n        return cc.p(w, h);\r\n    };\r\n\r\n    dyl.addMap = function (w, h, fun) {\r\n        var map = [];\r\n        for (var y = 0; y < h; y++) {\r\n            // map[y] = [];\r\n            var arr = [];\r\n            for (var x = 0; x < w; x++) {\r\n                // map[y][x] = fun ? fun(cc.p(x, y)) : null;\r\n                // cc.log(x, y, map[y][x]);\r\n                var val = fun ? fun(cc.p(x, y)) : null;\r\n                arr.push(val);\r\n            }\r\n\r\n            // map[y].push(arr);\r\n            map.push(arr);\r\n        }\r\n        map.w = w;\r\n        map.h = h;\r\n        map.get = function (p, name) {\r\n            if (!p) {\r\n                return false;\r\n            }\r\n            if (p.x < 0 || p.y < 0 || p.x >= this.w || p.y >= this.h) {\r\n                return false;\r\n            }\r\n            if (!name) {\r\n                return this[p.y][p.x];\r\n            }\r\n            if (this[p.y][p.x]) {\r\n                return this[p.y][p.x][name];\r\n            }\r\n            return this[p.y][p.x];\r\n        };\r\n        map.set = function (p, value) {\r\n            if (!p) {\r\n                return false;\r\n            }\r\n            if (p.x < 0 || p.y < 0 || p.x >= this.w || p.y >= this.h) {\r\n                // cc.log(p, this.w, this.h);\r\n                cc.warn(\"p不在地图上\");\r\n                return false;\r\n            }\r\n            var ans = map[p.y][p.x];\r\n            map[p.y][p.x] = value;\r\n            return ans;\r\n        };\r\n        map.find = function (value) {\r\n            for (var y = 0; y < this.h; y++) {\r\n                for (var x = 0; x < this.w; x++) {\r\n                    if (this[y][x] === value) {\r\n                        return cc.p(x, y);\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        map.run = function (fun) {\r\n            var arr = [];\r\n            for (var y = 0; y < this.h; y++) {\r\n                for (var x = 0; x < this.w; x++) {\r\n                    var p = fun(cc.p(x, y));\r\n                    (p || p === 0) && arr.push(p);\r\n                }\r\n            }\r\n            return arr;\r\n        };\r\n        return map;\r\n    };\r\n\r\n    dyl.addMapLayer = function (w, h, d) {\r\n        var x = (1 - w) * d / 2;\r\n        var y = (1 - h) * d / 2;\r\n        var ori = cc.p(x, y);\r\n        // cc.log(\"ori\", ori.x, ori.y, w, h, d);\r\n        var fun = function fun(p) {\r\n            //创建函数\r\n            var v = ori.add(p.mul(d));\r\n            // cc.log(v.x, v.y);\r\n            return v;\r\n        };\r\n        var map = this.addMap(w, h, fun);\r\n        map.ori = ori.sub(cc.p(d / 2, d / 2)); //最左下角\r\n        //map.w = w;\r\n        //map.h = h;\r\n        map.d = d;\r\n        var checkIn = function checkIn(p) {\r\n            var maxX = map.w * map.d / 2;\r\n            var maxY = map.h * map.d / 2;\r\n\r\n            return p.x >= -maxX && p.y >= -maxY && p.x < maxX && p.y < maxY;\r\n        };\r\n        map.find = function (p) {\r\n            if (!checkIn(p)) {\r\n                return false;\r\n            }\r\n            p = cc.p(p.x, p.y);\r\n            p.subSelf(this.ori);\r\n            p.mulSelf(1 / d);\r\n            p.x = Math.floor(p.x);\r\n            p.y = Math.floor(p.y);\r\n            return p;\r\n        };\r\n        return map;\r\n    };\r\n\r\n    var __randNum = 23;\r\n    dyl.setRand = function (num) {\r\n        cc.log(\"seed\", num);\r\n        __randNum = num;\r\n    };\r\n    dyl.rand = function (num) {\r\n        // cc.random0To1();\r\n        if (typeof this.__randNum !== \"number\") {\r\n            this.__randNum = 1;\r\n        }\r\n        var maxNum = 9987617;\r\n        __randNum = (59341 * __randNum + 6541) % maxNum;\r\n        var randNum = __randNum / maxNum;\r\n        if (num) {\r\n            return Math.floor(randNum * num);\r\n        }\r\n        return randNum;\r\n    };\r\n\r\n    // dyl.rand.set = function (num) {\r\n    //     __randNum = num;\r\n    // };\r\n\r\n\r\n    var __encryptFun = function __encryptFun(word) {\r\n        word = String(word);\r\n        var key = cryptoJS.enc.Utf8.parse(\"woaihejiamin\");\r\n        var iv = cryptoJS.enc.Utf8.parse(\"nihaijidewoma\");\r\n        var encrypted = cryptoJS.AES.encrypt(word, key, {\r\n            iv: iv,\r\n            mode: cryptoJS.mode.CBC,\r\n            padding: cryptoJS.pad.Pkcs7\r\n        });\r\n        return cryptoJS.enc.Base64.stringify(encrypted.ciphertext);\r\n    };\r\n\r\n    var __decryptFun = function __decryptFun(word) {\r\n        var key = cryptoJS.enc.Utf8.parse(\"woaihejiamin\");\r\n        var iv = cryptoJS.enc.Utf8.parse(\"nihaijidewoma\");\r\n        var decrypt = cryptoJS.AES.decrypt(word, key, {\r\n            iv: iv,\r\n            mode: cryptoJS.mode.CBC,\r\n            padding: cryptoJS.pad.Pkcs7\r\n        });\r\n        var uncrypted = decrypt.toString(cryptoJS.enc.Utf8).toString();\r\n        var uncryptedNum = parseInt(uncrypted);\r\n        if (uncryptedNum == 0 || uncryptedNum) {\r\n            uncrypted = uncryptedNum;\r\n        }\r\n        return uncrypted;\r\n    };\r\n\r\n    dyl.save = function (name, data) {\r\n        if (data === 0 || data) {\r\n            if (name[0] === \"_\") {\r\n                var str = JSON.stringify(data);\r\n                cc.sys.localStorage.setItem(name, __encryptFun(str));\r\n            } else {\r\n                cc.sys.localStorage.setItem(name, __encryptFun(data));\r\n            }\r\n        } else {\r\n            //删除数据\r\n            cc.sys.localStorage.removeItem(name);\r\n        }\r\n    };\r\n    dyl.read = function (name) {\r\n        //checkIn(p,isT) tposToPos(tp) getTpos(p) getPos(p, isT)\r\n        if (name[0] === \"_\") {\r\n            var data = cc.sys.localStorage.getItem(name);\r\n            if (!data) {\r\n                return data;\r\n            }\r\n            var str = __decryptFun(data);\r\n            return JSON.parse(str);\r\n        }\r\n        var data1 = cc.sys.localStorage.getItem(name);\r\n        if (!data1) {\r\n            return data1;\r\n        }\r\n        return __decryptFun(data1);\r\n    };\r\n    dyl.key = function (data) {\r\n        var keyOnData = {};\r\n        var keyUpData = {};\r\n        if (data.dir) {\r\n            data.w = function (isOn) {\r\n                return data.dir(isOn, cc.p(0, 1));\r\n            };\r\n            data.s = function (isOn) {\r\n                return data.dir(isOn, cc.p(0, -1));\r\n            };\r\n            data.a = function (isOn) {\r\n                return data.dir(isOn, cc.p(-1, 0));\r\n            };\r\n            data.d = function (isOn) {\r\n                return data.dir(isOn, cc.p(1, 0));\r\n            };\r\n\r\n            data.up = function (isOn) {\r\n                return data.dir(isOn, cc.p(0, 1));\r\n            };\r\n            data.down = function (isOn) {\r\n                return data.dir(isOn, cc.p(0, -1));\r\n            };\r\n            data.left = function (isOn) {\r\n                return data.dir(isOn, cc.p(-1, 0));\r\n            };\r\n            data.right = function (isOn) {\r\n                return data.dir(isOn, cc.p(1, 0));\r\n            };\r\n        }\r\n        cc.eventManager.addListener({\r\n            event: cc.EventListener.KEYBOARD,\r\n            onKeyPressed: function onKeyPressed(keyCode, event) {\r\n                for (var i in data) {\r\n                    if (keyCode === cc.KEY[i]) {\r\n                        if (keyOnData[i] === keyUpData[i]) {\r\n                            data[i](true);\r\n                            keyOnData[i] = !keyOnData[i];\r\n                        }\r\n                        return;\r\n                    }\r\n                }\r\n            },\r\n            // 松开按键时，停止向该方向的加速\r\n            onKeyReleased: function onKeyReleased(keyCode, event) {\r\n                for (var i in data) {\r\n                    if (keyCode === cc.KEY[i]) {\r\n                        data[i](false);\r\n                        keyUpData[i] = keyOnData[i];\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }, cc.director.getScene().getChildren()[0]);\r\n    };\r\n\r\n    dyl.keyOn = function (data) {\r\n        var keyOnData = {};\r\n        var keyUpData = {};\r\n        if (data.dir) {\r\n            data.w = function () {\r\n                return data.dir(cc.p(0, 1));\r\n            };\r\n            data.s = function () {\r\n                return data.dir(cc.p(0, -1));\r\n            };\r\n            data.a = function () {\r\n                return data.dir(cc.p(-1, 0));\r\n            };\r\n            data.d = function () {\r\n                return data.dir(cc.p(1, 0));\r\n            };\r\n\r\n            data.up = function () {\r\n                return data.dir(cc.p(0, 1));\r\n            };\r\n            data.down = function () {\r\n                return data.dir(cc.p(0, -1));\r\n            };\r\n            data.left = function () {\r\n                return data.dir(cc.p(-1, 0));\r\n            };\r\n            data.right = function () {\r\n                return data.dir(cc.p(1, 0));\r\n            };\r\n        }\r\n        cc.eventManager.addListener({\r\n            event: cc.EventListener.KEYBOARD,\r\n            onKeyPressed: function onKeyPressed(keyCode, event) {\r\n                for (var i in data) {\r\n                    if (keyCode === cc.KEY[i]) {\r\n                        if (keyOnData[i] === keyUpData[i]) {\r\n                            data[i]();\r\n                            keyOnData[i] = !keyOnData[i];\r\n                        }\r\n                        return;\r\n                    }\r\n                }\r\n            },\r\n            // 松开按键时，停止向该方向的加速\r\n            onKeyReleased: function onKeyReleased(keyCode, event) {\r\n                for (var i in data) {\r\n                    if (keyCode === cc.KEY[i]) {\r\n                        // data[i](false);\r\n                        keyUpData[i] = keyOnData[i];\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }, cc.director.getScene().getChildren()[0]);\r\n    };\r\n\r\n    dyl.keyUp = function (data) {\r\n        var keyOnData = {};\r\n        var keyUpData = {};\r\n        if (data.dir) {\r\n            data.w = function () {\r\n                return data.dir(cc.p(0, 1));\r\n            };\r\n            data.s = function () {\r\n                return data.dir(cc.p(0, -1));\r\n            };\r\n            data.a = function () {\r\n                return data.dir(cc.p(-1, 0));\r\n            };\r\n            data.d = function () {\r\n                return data.dir(cc.p(1, 0));\r\n            };\r\n\r\n            data.up = function () {\r\n                return data.dir(cc.p(0, 1));\r\n            };\r\n            data.down = function () {\r\n                return data.dir(cc.p(0, -1));\r\n            };\r\n            data.left = function () {\r\n                return data.dir(cc.p(-1, 0));\r\n            };\r\n            data.right = function () {\r\n                return data.dir(cc.p(1, 0));\r\n            };\r\n        }\r\n        cc.eventManager.addListener({\r\n            event: cc.EventListener.KEYBOARD,\r\n            onKeyPressed: function onKeyPressed(keyCode, event) {\r\n                for (var i in data) {\r\n                    if (keyCode === cc.KEY[i]) {\r\n                        if (keyOnData[i] === keyUpData[i]) {\r\n                            // data[i]();\r\n                            keyOnData[i] = !keyOnData[i];\r\n                        }\r\n                        return;\r\n                    }\r\n                }\r\n            },\r\n            // 松开按键时，停止向该方向的加速\r\n            onKeyReleased: function onKeyReleased(keyCode, event) {\r\n                for (var i in data) {\r\n                    if (keyCode === cc.KEY[i]) {\r\n                        data[i]();\r\n                        keyUpData[i] = keyOnData[i];\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }, cc.director.getScene().getChildren()[0]);\r\n    };\r\n\r\n    dyl.addDirArr = function () {\r\n        // 499 5479 \r\n        var arr = [cc.p(0, 1), cc.p(0, -1), cc.p(1, 0), cc.p(-1, 0)];\r\n        arr.sort(function () {\r\n            return 0.5 - dyl.rand();\r\n        });\r\n        return arr;\r\n    };\r\n\r\n    dyl.run = function () {\r\n        var self = this;\r\n        // this.node.run = function () {\r\n        var root = function root() {};\r\n        var node0 = arguments[0];\r\n        var endId = 0;\r\n        if (node0.parent && node0.getChildren) {\r\n            endId = 0;\r\n        } else {\r\n            node0 = cc.director.getScene().getChildren()[0];\r\n            endId = -1;\r\n        }\r\n        var createFun = function createFun(act, endFun) {\r\n            // let fun = endFun;\r\n            var fun = function fun() {\r\n                act();\r\n                endFun();\r\n            };\r\n            return fun;\r\n        };\r\n        var createJsFun = function createJsFun(act, endFun) {\r\n            // let fun = endFun;\r\n            var fun = function fun() {\r\n                self.node.js[act]();\r\n                endFun();\r\n            };\r\n            return fun;\r\n        };\r\n        var createArr = function createArr(act, endFun) {\r\n            var fun = function fun() {\r\n                // let counter = dyl.counter(endFun);\r\n                var arr = act;\r\n                arr.push(function () {\r\n                    return null;\r\n                });\r\n                var counterNum = arr.length;\r\n                var delFun = function delFun() {\r\n                    counterNum--;\r\n                    if (counterNum <= 0) {\r\n                        endFun();\r\n                    }\r\n                };\r\n                for (var i = 0; i < arr.length; i++) {\r\n                    create(arr[i], function () {\r\n                        // counter.del();\r\n                        delFun();\r\n                    })();\r\n                }\r\n            };\r\n            return fun;\r\n        };\r\n        var createOther = function createOther(act, endFun) {\r\n            // cc.log(\"createOther\", act.node);\r\n            var fun = function fun() {\r\n                var node = act.node;\r\n                if (node.node) {\r\n                    node = node.node;\r\n                }\r\n                if (act.add && act.add > 0) {\r\n                    act.easing(cc.easeIn(act.add));\r\n                } else if (act.add && act.add < 0) {\r\n                    var inout = cc.easeInOut(-act.add);\r\n                    // cc.log(\"iiiiii\", -act.add, inout);\r\n                    act.easing(cc.easeInOut(-act.add));\r\n                }\r\n                var cfun = cc.callFunc(function () {\r\n                    endFun();\r\n                });\r\n                var seq = cc.sequence(act, cfun);\r\n                node.runAction(seq);\r\n            };\r\n            return fun;\r\n        };\r\n        var createMove = function createMove(act, endFun) {\r\n            var fun = function fun() {\r\n                var node = node0;\r\n                if (node.node) {\r\n                    node = node.node;\r\n                }\r\n                if (act.add && act.add > 0) {\r\n                    act.easing(cc.easeIn(act.add));\r\n                } else if (act.add && act.add < 0) {\r\n                    var inout = cc.easeInOut(-act.add);\r\n                    // cc.log(\"iiiiii\", -act.add, inout);\r\n                    act.easing(cc.easeInOut(-act.add));\r\n                }\r\n                var cfun = cc.callFunc(endFun);\r\n                var seq = cc.sequence(act, cfun);\r\n                node.runAction(seq);\r\n            };\r\n            return fun;\r\n        };\r\n        var createDelay = function createDelay(act, endFun) {\r\n            var fun = function fun() {\r\n                var node = node0;\r\n                if (node.node) {\r\n                    node = node.node;\r\n                }\r\n                var delay = cc.delayTime(act);\r\n                var cfun = cc.callFunc(endFun);\r\n                var seq = cc.sequence(delay, cfun);\r\n                node.runAction(seq);\r\n            };\r\n            return fun;\r\n        };\r\n        var create = function create(act, endFun) {\r\n            // cc.log(act, act.node);\r\n            if (typeof act === \"function\") {\r\n                return createFun(act, endFun);\r\n            } else if (typeof act === \"number\") {\r\n                return createDelay(act, endFun);\r\n            } else if (typeof act === \"string\") {\r\n                return createJsFun(act, endFun);\r\n            } else if (Array.isArray(act)) {\r\n                return createArr(act, endFun);\r\n            } else if (act.node) {\r\n                return createOther(act, endFun);\r\n            } else {\r\n                return createMove(act, endFun);\r\n            }\r\n        };\r\n        for (var i = arguments.length - 1; i > endId; i--) {\r\n            // cc.log(\"arg\", i);\r\n            var act = arguments[i];\r\n            root = create(act, root);\r\n        }\r\n        // cc.log(\"root\", root);\r\n        root();\r\n    };\r\n\r\n    dyl.data = function (key, node) {\r\n        var arr = key.split(\".\");\r\n        var data = dyl._data[arr[0]][arr[1]];\r\n        if (!data) {\r\n            return cc.error(\"没有这个数据\", key);\r\n        }\r\n        // cc.log(\"data\", data, node);\r\n        for (var i in data) {\r\n            if (i !== \"_data\") {\r\n                // cc.log(i, data[i]);\r\n                node[i] = data[i];\r\n            }\r\n        }\r\n        return data._data;\r\n    };\r\n\r\n    dyl.process = function (js, arr) {\r\n        var tab = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n\r\n        var counterId = 0;\r\n        var counterArr = [];\r\n        var nextArr = arr;\r\n        var counter = null;\r\n\r\n        var runChild = function runChild() {\r\n            var i = 0;\r\n            var childCounter = function childCounter() {\r\n                var data = counterArr[i++];\r\n                if (!data) {\r\n                    counterArr.length = 0;\r\n                    return counter();\r\n                }\r\n                var childJs = data.childJs,\r\n                    name = data.name,\r\n                    arrr = data.arrr;\r\n\r\n                childJs[name].apply(childJs, [childCounter].concat(_toConsumableArray(arrr)));\r\n            };\r\n            childCounter();\r\n        };\r\n\r\n        var run = function run() {\r\n            //行动\r\n            if (counterArr.length > 0) {\r\n                return runChild();\r\n            }\r\n            var name = nextArr[counterId++];\r\n            if (!name) {\r\n                //结束了\r\n                return;\r\n            }\r\n            if (typeof name === \"string\") {\r\n                //代表函数\r\n                return js[name](counter);\r\n            }\r\n\r\n            ///下面是子对象了\r\n            for (var i in name) {\r\n                var next = js[i](counter);\r\n                nextArr = name[i][next];\r\n                if (!nextArr) {\r\n                    //找不到了，就是相当于结束流程\r\n                    return;\r\n                }\r\n                counterId = 0;\r\n                counter();\r\n            }\r\n        };\r\n\r\n        var addChild = function addChild(childJs, name, arrr) {\r\n            counterArr.push({\r\n                childJs: childJs,\r\n                name: name,\r\n                arrr: arrr\r\n            });\r\n        };\r\n\r\n        counter = function counter(childJs, name) {\r\n            if (!childJs) {\r\n                run();\r\n            } else {\r\n                for (var _len = arguments.length, arrr = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\r\n                    arrr[_key - 2] = arguments[_key];\r\n                }\r\n\r\n                addChild(childJs, name, arrr);\r\n            }\r\n        };\r\n        for (var i in tab) {\r\n            counter[i] = tab[i];\r\n        }\r\n\r\n        counter();\r\n    };\r\n};\r\n\r\nif (window.initHjmDataFun && window.initHjmFun && window.iscryptoJS) {\r\n    cc.log(\"init dyl\");\r\n    window.initDylFun(window.isCryptoJS);\r\n    window.initHjmFun();\r\n    window.initHjmDataFun();\r\n}\r\n\r\n// });","cc.Class({\r\n    extends: cc.Component,\r\n    editor: {\r\n        menu: \"dyl/瓦块地图\",\r\n    },\r\n    properties: {\r\n    },\r\n\r\n    __preload: function () {\r\n        this.initTileMap();\r\n    },\r\n\r\n    initTileMap: function () {\r\n        let tmx = this.node.getComponent(cc.TiledMap);\r\n        let mapSize = tmx.getMapSize();\r\n        let tileD = tmx.getTileSize().width;\r\n\r\n        this.node.map = dyl.addMap(mapSize.width, mapSize.height);\r\n        this.node.posMap = dyl.addMapLayer(mapSize.width, mapSize.height, tileD);\r\n        //checkIn(p,isT) tposToPos(tp) getTpos(p) getPos(p, isT)\r\n\r\n        this.node.add = function (layerName, fun) {\r\n            let layer = node.getChildByName(layerName).getComponent(cc.TiledLayer);\r\n            if (layer) { //正常的地图，其他是对象\r\n                let size = layer.getLayerSize();\r\n                let d = layer.getMapTileSize().width;\r\n                for (let x = size.width - 1; x >= 0; x--) {\r\n                    for (let y = size.height - 1; y >= 0; y--) {\r\n                        let gid = layer.getTileGIDAt(x, size.height - y - 1);\r\n                        fun(cc.p(x, y), gid);\r\n                    }\r\n                }\r\n                map.d = d;\r\n                return map;\r\n            }\r\n            else {\r\n                layer = tmx.getObjectGroup(layerName);\r\n                let arr = layer.getObjects();\r\n                // cc.log(\"layerName\", arr);\r\n                for (var i = arr.length - 1; i >= 0; i--) {\r\n                    let x = arr[i].x / tileD;\r\n                    let y = arr[i].y / tileD;\r\n                    // fun(arr[i], dyl.newPos(x, mapSize.height - y - 1));\r\n                    fun(cc.p(x, mapSize.height - y - 1), arr[i].name);\r\n                }\r\n            }\r\n        }\r\n    },\r\n});\r\n","let NodeData = cc.Class({\r\n\tname: \"NodeData\",\r\n\tproperties: {\r\n\t\tid: \"\",\r\n\t\tnode: cc.Node,\r\n\t\tp: cc.p(0, 0),\t\t\r\n\t\trotation: 0,\r\n\t\tscaleX: 1,\r\n\t\tscaleY: 1,\r\n\t\t// anchorX: cc.p(0.5, 0.5),\r\n\t\tanchorX: 0.5,\r\n\t\tanchorY: 0.5,\r\n\t\t// size: cc.size(100, 100),/**/\r\n\t\theight: 0.0,\r\n\t\twidth: 0.0,\r\n\t\tcolor: cc.color(255, 255, 255),\r\n\t\topacity: 255,\r\n\t\tskewX: 0,\r\n\t\tskewY: 0,\r\n\t\tactive: true,\r\n        lab: \"\",\r\n\t}\r\n});\r\n\r\nlet NodeDataArr = cc.Class({\r\n\tname: \"NodeDataArr\",\r\n\tproperties: {\r\n\t\t// arr: {\r\n\t\t// \tdefault: [],\r\n\t\t// \ttype: NodeData\r\n\t\t// }\r\n\t\tarr: [NodeData]\r\n\t}\r\n});\r\n\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n    editor: {\r\n        menu: \"dyl/弹窗-保存状态\",\r\n        executeInEditMode: true,\r\n    },\r\n    ctor: function() {\r\n    \tObject.defineProperty(this,\"node\",{//这里的方法名name,就表示定义了一个name属性（因此才能通过object.name访问）,只定义了getter访问器,没有定义[[value]]值\r\n\t\t    get:function (){//只定义了get 特性，因此只能读不能写\r\n\t\t        return undefined;\r\n\t\t    },    \r\n\t\t  \tset:function (node) {\r\n\t\t        delete this.node;\r\n\t\t        this.node = node;\r\n\t\t        this._myInit();\r\n\t\t\t},\r\n\t\t  \tconfigurable: true\r\n\t\t});\r\n    },\r\n    properties: {\r\n    \tdata: {\r\n    \t\tdefault: [],\r\n    \t\ttype: NodeDataArr,\r\n    \t\tvisible: false,\r\n    \t},\r\n    \t// [SaveData],\r\n    \tshowData: {\r\n    \t\tdefault: \"\",\r\n    \t\ttype: cc.String,\r\n    \t\tnotify(){\r\n    \t\t\t// if (this._getString(this.showData) === this._getString(this.))\r\n    \t\t\tlet name = this._getString(this.showData);\r\n    \t\t\tfor (let i = this.stateArr.length - 1; i >= 0; i--) {\r\n    \t\t\t\tif (this._getString(this.stateArr[i]) === name) {\r\n    \t\t\t\t\tthis._read(i);\r\n    \t\t\t\t\treturn;\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n    \t\t}\r\n    \t},\r\n    \t_stateArr:{\r\n    \t\tdefault: [],\r\n    \t\ttype: cc.String\r\n    \t},\r\n    \tstateArr: {\r\n    \t\tdefault: [],\r\n    \t\ttype: cc.String,\r\n    \t\tnotify() {\r\n    \t\t\tfor (let i = this._stateArr.length - 1; i >= 0; i--) {\r\n    \t\t\t\tif (this._stateArr[i] !== this.stateArr[i]) {\r\n    \t\t\t\t\tif (this.stateArr[i] === \" \") {\r\n    \t\t\t\t\t\tthis.stateArr[i] = this._stateArr[i];\r\n    \t\t\t\t\t}\r\n    \t\t\t\t\tthis._save(i);\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n    \t\t\tthis._stateArr.length = 0;\r\n    \t\t\tthis._stateArr.push(...this.stateArr);\t\r\n    \t\t}\r\n    \t},\r\n    },\r\n\r\n    _myInit: function() {\r\n    \t// cc.log(\"stateArr\", this.stateArr);\r\n    \t// let tab = {};\r\n    \t// for (let i = this.stateArr.length - 1; i >= 0; i--) {\r\n    \t// \tlet name = this._getString(this.stateArr[i]);\r\n    \t// \ttab[name] = i;\r\n    \t// }\r\n    \tthis.node.add = (name, time)=>{\r\n            if (!name) {\r\n                return this.myAct(time);\r\n            }\r\n    \t\tname = this._getString(name);\r\n    \t\tfor (let i = this.stateArr.length - 1; i >= 0; i--) {\r\n\t    \t\tif(name === this._getString(this.stateArr[i])) {\r\n\t    \t\t\tthis._read(i);\r\n\t    \t\t\tbreak;\r\n\t    \t\t}\r\n\t    \t}\r\n\t    \tthis.myAct(time);\r\n    \t}\r\n    },\r\n\r\n    myAct: function(time) {\r\n    \tif (!time) {\r\n    \t\treturn;\r\n    \t}\r\n        this.node.active = true;\r\n    \tlet oriScale = this.node.scale;\r\n    \tlet oriOpacity = this.node.opacity;\r\n\r\n    \tlet scaleR = (time > 0) ? 2 : 1;\r\n    \tlet opacityR = (time > 0) ? 0 : 1;\r\n\r\n\r\n    \tlet node = this.node;\r\n        node.stopAllActions();\r\n        node.setScale(oriScale * scaleR);\r\n        node.opacity = oriOpacity * opacityR;\r\n        // let cfun = cc.callFunc(fun);\r\n        let fade = cc.fadeTo(Math.abs(time), oriOpacity * (1 - opacityR));\r\n        let scale = cc.scaleTo(Math.abs(time), oriScale * (3 - scaleR));\r\n        let cfun = cc.callFunc(()=>{\r\n        \tthis.node.opacity = oriOpacity;\r\n        \tthis.node.setScale(oriScale);\r\n        \tthis.node.active = (time > 0);\r\n        });\r\n        let seq = cc.sequence(cc.spawn(fade, scale), cfun);\r\n        node.runAction(seq);\r\n    },\r\n\r\n    _getString: function(str) {\r\n    \treturn str.replace(/\\s+/g,\"\");\r\n    },\r\n\r\n    _read: function(id) {\r\n        if (this._getString(this.stateArr[id]) === \"\") {\r\n            return;\r\n        }\r\n    \t// cc.log(\"read\", id);\r\n    \t// cc.log(this.data);\r\n    \t// for (let i in this.data) {\r\n    \t// \tcc.log(\"i\", i);\r\n    \t// }\r\n    \t// cc.log(this.data[id]);\r\n    \tlet dataArr = this.data[id].arr;\r\n    \t// for (let i = 0; i < dataArr.length; i++) {\r\n    \t// \tcc.log(\"ii\", i, dataArr[i]);\r\n    \t// }\r\n    \tfor (let i = dataArr.length - 1; i >= 0; i--) {\r\n    \t\t// cc.log(\"node\", dataArr[i].node);\r\n    \t\tif (!dataArr[i].node) {\r\n    \t\t\tcontinue;\r\n    \t\t}\r\n    \t\t// cc.log(\"rrreeeddd\");\r\n    \t\tlet node = dataArr[i].node;\r\n    \t\tlet data = dataArr[i];\r\n    \t\tnode.setPosition(data.p);\r\n    \t\tnode.rotation = data.rotation;\r\n    \t\tnode.scaleX = data.scaleX;\r\n    \t\tnode.scaleY = data.scaleY;\r\n    \t\tnode.anchorX = data.anchorX;\r\n    \t\tnode.anchorY = data.anchorY;\r\n    \t\t// node.size = data.size;\r\n    \t\tnode.color = data.color;\r\n    \t\tnode.opacity = data.opacity;\r\n    \t\tnode.skewX = data.skewX;\r\n    \t\tnode.skewY = data.skewY;\r\n    \t\tnode.active = data.active;\r\n            let lab = node.getComponent(cc.Label);\r\n            if (lab) {\r\n                lab.string = data.lab;\r\n            }\r\n    \t\tif (node.name === \"Canvas\") {\r\n    \t\t\tlet canvas = this.node.getComponent(cc.Canvas);\r\n    \t\t\tcanvas.designResolution = cc.size(data.width, data.height);\r\n    \t\t}\r\n    \t\telse {\r\n\t    \t\tnode.height = data.height;\r\n\t    \t\tnode.width = data.width;\r\n    \t\t}\r\n    \t}\r\n    \t//   \tid: \"\",\r\n\t\t// node: cc.Node,\r\n\t\t// p: cc.p(0, 0),\t\t\r\n\t\t// rotation: 0,\r\n\t\t// scaleX: 1,\r\n\t\t// scaleY: 1,\r\n\t\t// anchor: cc.p(0.5, 0.5),\r\n\t\t// size: cc.size(100, 100),\r\n\t\t// color: cc.color(255, 255, 255),\r\n\t\t// opacity: 255,\r\n\t\t// skew: cc.p(0, 0),\r\n\r\n    },\r\n\r\n    _save: function(id) {\r\n    \t// cc.log(\"save\");\r\n    \tthis.data[id] = this._getSaveData();\r\n    \t// for (let i in this.data) {\r\n    \t// \tcc.log(\"i\", i);\r\n    \t// }\r\n    \t// cc.log(this.)\r\n    },\r\n\r\n    _getSaveData: function() {\r\n    \tlet saveData = new NodeDataArr;\r\n    \tsaveData.arr = this._getSaveNodeArr(this.node);\r\n    \treturn saveData;\r\n    },\r\n\r\n    _getSaveNodeArr: function(node) {\r\n    \tlet arr = [this._addNodeData(node)];\r\n    \tlet nodeArr = node.getChildren();\r\n    \tfor (let i = nodeArr.length - 1; i >= 0; i--) {\r\n    \t\tarr.push(...this._getSaveNodeArr(nodeArr[i]));\r\n    \t}\r\n    \treturn arr;\r\n    },\r\n\r\n    _addNodeData: function(node) {\r\n    \tlet nodeData = new NodeData;\r\n    \tnodeData.id = node.name;\r\n    \tnodeData.node = node;\r\n    \tnodeData.p = cc.p(node);\r\n    \tnodeData.rotation = node.rotation;\r\n    \tnodeData.scaleX = node.scaleX;\r\n    \tnodeData.scaleY = node.scaleY;\r\n    \tnodeData.anchorX = node.anchorX;\r\n    \tnodeData.anchorY = node.anchorY;\r\n    \t// nodeData.size = node.size;\r\n    \tnodeData.height = node.height;\r\n    \tnodeData.width = node.width;\r\n    \tnodeData.color = node.color;\r\n    \tnodeData.opacity = node.opacity;\r\n    \tnodeData.skewX = node.skewX;\r\n    \tnodeData.skewY = node.skewY;\r\n    \tnodeData.active = node.active;\r\n        let lab = node.getComponent(cc.Label);\r\n        if (lab) {\r\n            nodeData.lab = lab.string;\r\n        }\r\n    \treturn nodeData;\r\n    },\r\n\r\n    // _addEventListeners: function() {\r\n    // \tcc.director.on(cc.Director.EVENT_BEFORE_VISIT, this._doLayoutDirty, this);\r\n    //     this.node.on('size-changed', this._doLayoutDirty, this);\r\n    //     this.node.on('anchor-changed', this._doLayoutDirty, this);\r\n    //     this.node.on('child-added', this._doLayoutDirty, this);\r\n    //     this.node.on('child-removed', this._doLayoutDirty, this);\r\n    //     this.node.on('child-reorder', this._doLayoutDirty, this);\r\n    //     this._addChildrenEventListeners();\r\n    // },\r\n\r\n    // _addChildrenEventListeners: function() {\r\n    // \tvar children = this.node.children;\r\n    //     children.forEach(function (child) {\r\n    //         child.on('size-changed', this._doLayoutDirty, this);\r\n    //         child.on('position-changed', this._doLayoutDirty, this);\r\n    //         child.on('anchor-changed', this._doLayoutDirty, this);\r\n    //         child.on('active-in-hierarchy-changed', this._doLayoutDirty, this);\r\n    //     }.bind(this));\r\n    // },\r\n\r\n    // _doLayoutDirty: function() {\r\n    // \tthis._save();\r\n    // },\r\n\r\n\r\n\r\n\r\n    onLoad: function () {\r\n    \tthis.node.on('touchstart', ()=>null);\r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n    editor: {\r\n        menu: \"dyl/物理\",\r\n        executeInEditMode: true,\r\n    },\r\n    properties: {\r\n        collisionFun: {\r\n            default: function () {\r\n                return new cc.Component.EventHandler;\r\n            },\r\n            type: cc.Component.EventHandler,\r\n        },\r\n        // collisionFun: cc.Component.EventHandler,\r\n    },\r\n\r\n    __preload () {\r\n        // if (CC_EDITOR) {\r\n        //     cc.log(\"haha\");\r\n        //     this.node.on(\"name-changed\", ()=>{\r\n        //         cc.log(\"name-changed\");\r\n        //     })\r\n        // }\r\n\r\n\r\n\r\n        let rigidbody = this.node.getComponent(cc.RigidBody);\r\n        Object.defineProperty(this.node, \"v\", {\r\n            get: function () {\r\n                return rigidbody.linearVelocity;\r\n            },\r\n            set: function (velocity) {\r\n                rigidbody.linearVelocity = velocity;\r\n            }\r\n        });\r\n\r\n        Object.defineProperty(this.node, \"f\", {\r\n            get: function () {\r\n                return rigidbody.linearDamping;\r\n            },\r\n            set: function (damping) {\r\n                rigidbody.linearDamping = damping;\r\n            }\r\n        });\r\n\r\n        Object.defineProperty(this.node, \"a\", {\r\n            set: function (force) {\r\n                rigidbody.applyForceToCenter(force);\r\n            }\r\n        });\r\n\r\n        rigidbody.fixedRotation = true;\r\n        rigidbody.enabledContactListener = true;\r\n        if (this.collisionFun.handler !== \"\") {\r\n            this.collisionComponent = this.collisionFun.target.getComponent(this.collisionFun.component);\r\n        }\r\n    },\r\n\r\n\r\n    onEnable () {\r\n        if (CC_EDITOR) {\r\n            if (!this.collisionFun.target) {\r\n                this.collisionFun.target = this.node;\r\n            }\r\n        }\r\n    },\r\n    \r\n    onBeginContact: function (contact, selfCollider, otherCollider) {\r\n        if (!this.collisionComponent) {\r\n            return;\r\n        }\r\n        contact.disabled = this.collisionComponent[this.collisionFun.handler](otherCollider.node);\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    },\r\n\r\n    onLoad () {\r\n        this.node.type = \"en\";\r\n\r\n        let name = this.node.name;\r\n        dyl.data(\"enData.\" + name, this.node);\r\n        // let data = dyl.data.enData[name];\r\n        // this.node.hp = Number(data.hp);\r\n        // this.node.def = Number(data.def);\r\n        // this.node.atk = Number(data.atk);\r\n        // this.node.atkFun = data.atkFun;\r\n        // this.node.defFun = data.defFun;\r\n    },\r\n\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    },\r\n\r\n    onLoad () {\r\n        // dyl.atk = \"crossed-swords\";\r\n        // dyl.def = \"templar-shield\";\r\n        this.node.touch = \"stop\";\r\n\r\n        let lv = hjm.level;\r\n        // let randNum = Number(dyl.data.levelData.rand);\r\n        let randNum = dyl.data(\"levelData.\" + String(lv), this).rand;\r\n        // this.node.rand.set(randNum);\r\n        dyl.setRand(randNum);\r\n        // cc.log(\"rand\", dyl.rand(100));\r\n        let enNameArr = this.getEnNameArr(lv);\r\n        this.getEnArr(enNameArr);\r\n    },\r\n\r\n    getEnNameArr (lv) {\r\n        // let data = dyl.data.levelData[lv]; \r\n        let data = {};\r\n        dyl.data(\"levelData.\" + String(lv), data);\r\n        let enNameArr = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            let name = data[\"en\" + String(i)];\r\n            if (name && (name !== \"\")) {\r\n                enNameArr.push(\"role/\" + name);\r\n            }\r\n        }\r\n        // cc.log(enNameArr);\r\n        return enNameArr;\r\n    },\r\n\r\n    getEnArr (enNameArr) {\r\n        let count = enNameArr.length;\r\n        let enArr = [];\r\n        let fun = ()=>{\r\n            count--;\r\n            if (!count) {\r\n                this.initMap(enArr);\r\n                this.node.getComponent(\"GameMain\").myStart();\r\n            }\r\n        }\r\n        for (var i = enNameArr.length - 1; i >= 0; i--) {\r\n            let name = enNameArr[i];\r\n            cc.loader.loadRes(name, (err, prefab)=>{\r\n                let node = cc.instantiate(prefab);\r\n                enArr.push(node);\r\n                // cc.log(name, err);\r\n                node.parent = hjm._en;\r\n                fun();\r\n            });\r\n        }\r\n    },\r\n\r\n    getNotArr (notNum) {\r\n        let notArr = [];\r\n        let nodeArr = hjm._not.getChildren();\r\n        for (let i = 0; i < notNum; i++) {\r\n            let node = nodeArr[i];\r\n            node.active = true;\r\n            notArr.push(node);\r\n        }\r\n        this.node.notArr = [];\r\n        for (let i = notNum; i < nodeArr.length; i++) {\r\n            this.node.notArr.push(nodeArr[i]);\r\n        }\r\n        return notArr;\r\n    },\r\n\r\n    initMap (enArr) {\r\n        let myArr = [...hjm._me.getChildren()];\r\n        let notNum = 8 - myArr.length - enArr.length;\r\n        let notArr = this.getNotArr(notNum);\r\n        let nodeArr = [0, ...myArr, ...notArr, ...enArr];\r\n        nodeArr.sort(()=>{\r\n            let tmp = dyl.rand() - 0.5;\r\n            // cc.log(\"tmp\", tmp);\r\n            return tmp;\r\n        });\r\n\r\n        let id = 0; \r\n        let posMap = dyl.addMapLayer(3, 3, 315);\r\n        //checkIn(p,isT) tposToPos(tp) getTpos(p) getPos(p, isT)\r\n        let map = dyl.addMap(3, 3, (p)=>{\r\n            let i = id++;\r\n            let node = nodeArr[i];\r\n            if (node) {\r\n                node.setPosition(posMap.get(p));\r\n                return nodeArr[i];\r\n            }\r\n            return null;\r\n        });\r\n        this.node.posMap = posMap;\r\n        this.node.map = map;\r\n    },\r\n    // update (dt) {},\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    },\r\n\r\n    start () {\r\n    },\r\n\r\n    myStart () {\r\n        cc.log(\"myStart\");\r\n        this.touchData = null;\r\n        dyl.process(this, [\"prePk\", \"resetState\", \"myStartEnd\"], {});\r\n    },\r\n\r\n    myStartEnd (counter) {\r\n        this.node.touch = \"touch\";\r\n        counter();\r\n    },\r\n\r\n    saveTouch (tp) {\r\n        if (!this.touchData) {\r\n            this.touchData = \"ing\";\r\n            this.play(tp);\r\n        }\r\n        else if (this.touchData === \"ing\") {\r\n            this.touchData = tp;\r\n        }\r\n        else {\r\n            this.touchData = tp;\r\n        }\r\n    },\r\n\r\n    delTouch () {\r\n        if (!this.touchData) {\r\n        }\r\n        else if (this.touchData === \"ing\") {\r\n            this.touchData = null;\r\n        }\r\n        else {\r\n            // this.touchData = tp;\r\n            let tp = this.touchData;\r\n            this.touchData = \"ing\";\r\n            this.play(tp);\r\n        }\r\n    },\r\n\r\n    getAction () {\r\n        let id = 0;\r\n        let dataArr = [];        \r\n        let end = ()=>{\r\n            let i = id++;\r\n            if (i >= dataArr.length) {\r\n                return;\r\n            }\r\n            let {node, fun, arr} = dataArr[i];\r\n            fun.bind(node)(end, ...arr);\r\n        }\r\n\r\n        let add = (node, fun, ...arr)=>{\r\n            if (!node) {\r\n                return end();\r\n            }\r\n            if (!fun) {\r\n                return;\r\n            }\r\n            let data = {\r\n                node: node,\r\n                fun: fun,\r\n                arr: arr\r\n            }\r\n            dataArr.push(data);\r\n        }\r\n        return add;\r\n    },\r\n\r\n    touchOn (p) {\r\n        let tp = this.node.posMap.find(p);\r\n        if (tp) {\r\n            this.saveTouch(tp);\r\n        }\r\n    },\r\n\r\n    getRunTypeInit (counter) {\r\n        let {tp} = counter;\r\n    },\r\n\r\n    getRunTypeInit (counter) {\r\n        let {tp} = counter;\r\n        let map = this.node.map;\r\n        let dir = this.getDir(tp);\r\n        if (!dir) {\r\n            this.delTouch();\r\n            return null;\r\n        }\r\n        let moveNode = map.get(tp); \r\n        let moveType = moveNode.type;\r\n\r\n        moveNode.oriParent = moveNode.parent;\r\n        moveNode.parent = hjm._top;\r\n\r\n        counter.moveNode = moveNode;\r\n        counter.moveType = moveType;\r\n        counter.dir = dir;\r\n        // counter();\r\n        if (moveType === \"atk\" || moveType === \"def\") {\r\n            moveType = \"not\";\r\n        }\r\n        return moveType;\r\n        // add(this, this.run, tp, dir);\r\n        // add(this, this.prePk);\r\n    },\r\n\r\n    run (counter) {\r\n        let {tp, dir} = counter;\r\n        let ntp = dir.add(tp);\r\n        let move = cc.moveTo(0.2, this.node.posMap.get(ntp));\r\n        // move.add = -3;\r\n        let node = this.node.map.get(tp);\r\n        dyl.run(node, move, ()=>{\r\n            this.node.map.set(tp, null);\r\n            this.node.map.set(ntp, node);\r\n            tp.x = ntp.x;\r\n            tp.y = ntp.y;\r\n        }, counter);\r\n    },\r\n\r\n    getAtkDefEn (counter) {\r\n        let {tp} = counter;\r\n        let map = this.node.map;\r\n        let dirArr = dyl.addDirArr();\r\n        counter.enPosArr = [];\r\n        counter.atkFun = \"notAtk\";\r\n        counter.defFun = \"notDef\";\r\n        for (let i = 0; i < 4; i++) {\r\n            let dir = dirArr[i];\r\n            let ntp = dir.add(tp);\r\n            let type = map.get(ntp, \"type\");\r\n            if (type === \"atk\") {\r\n                counter.atkFun = ai.atkFun;\r\n                counter.atkNode = map.get(ntp);\r\n                counter.atkDir = dir.mul(-this.node.posMap.d);\r\n            }\r\n            else if (type === \"def\") {\r\n                counter.defFun = ai.defFun;\r\n                counter.defNode = map.get(ntp);\r\n                counter.defDir = dir.mul(-this.node.posMap.d);\r\n            }\r\n            else if (type === \"en\") {\r\n                counter.enPosArr.push(ntp);\r\n            }\r\n        }\r\n        counter();\r\n        return;\r\n    },\r\n\r\n    runTool (counter) { //moveNode.atk += this.atkNode.atk;\r\n        let {atkNode, atkDir, defNode, defDir, moveNode, enPosArr} = counter;\r\n        if (enPosArr.length === 0) {\r\n            return counter();\r\n        }\r\n        if (atkNode) {\r\n            counter(atkNode, \"add\", hjm._top, atkDir, ()=>{\r\n                moveNode.atk += atkNode.atk;\r\n            });\r\n        }\r\n        if (defNode) {\r\n            counter(defNode, \"add\", hjm._top, defDir, ()=>{\r\n                moveNode.def += defNode.def;\r\n            });\r\n        }\r\n        counter();\r\n    },\r\n\r\n    myAtk (counter) {\r\n        // add(this, hjm._skill.add, this.atkFun, tp, map, this.node.posMap);\r\n        let {atkFun, tp, moveNode, defFun} = counter;\r\n        moveNode.defFun = defFun;\r\n        counter(hjm._skill, \"add\", atkFun, tp, this.node.map, this.node.posMap);\r\n        counter();\r\n    },\r\n\r\n    checkDie (counter) {\r\n        let notLose = false;\r\n        let notWin = false;\r\n        let map = this.node.map;\r\n        map.run((tp)=>{\r\n            let node = map.get(tp);\r\n            if (node && node.hp <= 0) {\r\n                this.die(tp);\r\n                return;\r\n            }\r\n            if (node && node.type === \"me\") {\r\n                notLose = true;\r\n            }\r\n            if (node && node.type === \"en\") {\r\n                notWin = true;\r\n            }\r\n        })\r\n        if (!notLose) {\r\n            counter.endAns = \"lose\";\r\n            counter();\r\n            return;\r\n        }\r\n        if (!notWin) {\r\n            counter.endAns = \"win\";\r\n            counter();\r\n            return;\r\n        }\r\n        counter();\r\n        return;\r\n    },\r\n\r\n    enAtkBack (counter) {\r\n        let {enPosArr, tp} = counter;\r\n        for (let i = enPosArr.length - 1; i >= 0; i--) {\r\n            let ep = enPosArr[i];\r\n            let en = this.node.map.get(ep);\r\n            // add(this, hjm._skill.add, en.atkFun, ep, map, this.node.posMap);\r\n            // add(this, this.checkDie);\r\n            counter(hjm._skill, \"add\", en.atkFun, ep, this.node.map, this.node.posMap);\r\n        }\r\n        return counter();\r\n    },\r\n\r\n    endPlay (counter) {\r\n        let {tp, atkNode, defNode, endAns} = counter;\r\n        // cc.log(\"endPlay\");\r\n        let moveNode = this.node.map.get(tp);\r\n        moveNode.parent = moveNode.oriParent;\r\n        // moveNode.defFun = \"notDef\";\r\n        if (moveNode.type === \"me\") {\r\n            moveNode.defFun = \"notDef\";\r\n            moveNode.atkFun = \"notAtk\";\r\n        }\r\n        let map = this.node.map;\r\n        map.run((p)=>{\r\n            let node = map.get(p);\r\n            if (node && (node.type !== \"not\")) {\r\n                // node.hp = node.oriData.hp;\r\n                node.atk = node.oriData.atk;\r\n                node.def = node.oriData.def;\r\n            }\r\n        })\r\n        if (atkNode) {\r\n            atkNode.reset();\r\n        }\r\n        if (defNode) {\r\n            defNode.reset();\r\n        }\r\n        // this.checkDie();\r\n        this.delTouch();\r\n        if (endAns) {\r\n            this.node.touch = \"end\";\r\n            if (endAns === \"win\") {\r\n                hjm.level = hjm.level + 1;\r\n            }\r\n            hjm._end.add(endAns, 0.3);\r\n        }\r\n        counter();\r\n    },\r\n\r\n    enAtk (counter) {\r\n        let {tp, moveNode} = counter;\r\n        counter(hjm._skill, \"add\", moveNode.atkFun, tp, this.node.map, this.node.posMap);\r\n        counter();\r\n        // add(this, hjm._skill.add, moveNode.atkFun, tp, map, this.node.posMap);\r\n    },\r\n\r\n    play (tp) {\r\n\r\n        let arr = [{\r\n            getRunTypeInit: {\r\n                me: [\"run\", \"resetState\", \"getAtkDefEn\", \"runTool\", \"myAtk\", \"checkDie\", \"resetState\", \"enAtkBack\", \"checkDie\", \"endPlay\", \"resetState\"],\r\n                en: [\"run\", \"resetState\", \"enAtk\", \"checkDie\", \"endPlay\", \"resetState\"],\r\n                not: [\"run\", \"resetState\", \"endPlay\", \"resetState\"]\r\n            }}];\r\n        dyl.process(this, arr, {\r\n            tp: tp\r\n        });\r\n\r\n\r\n\r\n        // let map = this.node.map;\r\n        // let dir = this.getDir(tp);      \r\n        // if (!dir) { //操作无效\r\n        //     this.delTouch();\r\n        //     return;\r\n        // }  \r\n        // let moveNode = map.get(tp);\r\n        // this.moveType = moveNode.type;\r\n        // moveNode.oriParent = moveNode.parent;\r\n        // moveNode.parent = hjm._top;\r\n        // let add = this.getAction();\r\n        // add(this, this.run, tp, dir);\r\n        // add(this, this.prePk);\r\n        // if (this.moveType === \"me\") {\r\n            // let enPosArr = this.getAtkDefEn(tp.add(dir));\r\n            // moveNode.defFun = this.defFun;\r\n            // if (this.atkNode && enPosArr.length > 0) {\r\n            //     add(this.atkNode, this.atkNode.add, hjm._top, this.atkDir);\r\n            //     add(this, (end)=>{\r\n            //         // cc.log(typeof this.atkNode.atk, typeof moveNode.atk);\r\n            //         moveNode.atk += this.atkNode.atk;\r\n            //         end();\r\n            //     });\r\n            // }\r\n            // if (this.defNode && enPosArr.length > 0) {\r\n            //     add(this.defNode, this.defNode.add, hjm._top, this.defDir);\r\n            //     add(this, (end)=>{\r\n            //         moveNode.def += this.defNode.def;\r\n            //         end();\r\n            //     });\r\n            // }\r\n            // add(this, hjm._skill.add, this.atkFun, tp, map, this.node.posMap);\r\n            // add(this, this.checkDie);\r\n            // for (let i = enPosArr.length - 1; i >= 0; i--) {\r\n            //     let ep = enPosArr[i];\r\n            //     let en = map.get(ep);\r\n            //     add(this, hjm._skill.add, en.atkFun, ep, map, this.node.posMap);\r\n            //     add(this, this.checkDie);\r\n            // }\r\n            // if (this.isAtk) {\r\n            //     add(this, this.node._skill.add, dyl.atkFun, tp, map, this.node.posMap);\r\n            // }\r\n            // else {\r\n            //     add(this, this.node._skill.add, \"notAtk\", tp, map, this.node.posMap);\r\n            // }\r\n        // }\r\n        // else if (this.moveType === \"en\") {\r\n        //     add(this, hjm._skill.add, moveNode.atkFun, tp, map, this.node.posMap);\r\n        //     add(this, this.checkDie);\r\n        // }\r\n\r\n        // add(this, this.endPlay, tp);\r\n        // add(); \r\n    },\r\n\r\n    // checkDie (end) {\r\n    //     let notLose = false;\r\n    //     let notWin = false;\r\n    //     let map = this.node.map;\r\n    //     map.run((tp)=>{\r\n    //         let node = map.get(tp);\r\n    //         if (node && node.hp <= 0) {\r\n    //             this.die(tp);\r\n    //             return;\r\n    //         }\r\n    //         if (node && node.type === \"me\") {\r\n    //             notLose = true;\r\n    //         }\r\n    //         if (node && node.type === \"en\") {\r\n    //             notWin = true;\r\n    //         }\r\n    //     })\r\n    //     if (!notLose) {\r\n    //         this.endAns = \"lose\";\r\n    //         end();\r\n    //         return;\r\n    //     }\r\n    //     if (!notWin) {\r\n    //         this.endAns = \"win\";\r\n    //         end();\r\n    //         return;\r\n    //     }\r\n    //     end();\r\n    //     return;\r\n    // },\r\n\r\n    die (tp) {\r\n        let notArr = this.node.notArr;\r\n        let not = notArr[notArr.length - 1];\r\n        notArr.length--;\r\n        not.active = true;\r\n\r\n        let node = this.node.map.get(tp);\r\n        node.active = false;\r\n        not.setPosition(this.node.posMap.get(tp));\r\n        this.node.map.set(tp, not);\r\n    },\r\n\r\n    // getAtkDefEn (tp) {\r\n    //     let map = this.node.map;\r\n    //     let dirArr = dyl.addDirArr();\r\n    //     let enPosArr = [];\r\n    //     this.atkFun = \"notAtk\";\r\n    //     this.defFun = \"notDef\";\r\n    //     this.atkNode = null;\r\n    //     this.defNode = null;\r\n    //     for (let i = 0; i < 4; i++) {\r\n    //         let dir = dirArr[i];\r\n    //         let ntp = dir.add(tp);\r\n    //         let type = map.get(ntp, \"type\");\r\n    //         if (type === \"atk\") {\r\n    //             this.atkFun = ai.atkFun;\r\n    //             this.atkNode = map.get(ntp);\r\n    //             this.atkDir = dir.mul(-this.node.posMap.d);\r\n    //         }\r\n    //         else if (type === \"def\") {\r\n    //             this.defFun = ai.defFun;\r\n    //             this.defNode = map.get(ntp);\r\n    //             this.defDir = dir.mul(-this.node.posMap.d);\r\n    //         }\r\n    //         else if (type === \"en\") {\r\n    //             enPosArr.push(ntp);\r\n    //         }\r\n    //     }\r\n    //     return enPosArr;\r\n    // },\r\n\r\n    prePk (counter) {\r\n        let map = this.node.map;\r\n        map.run((p)=>{\r\n            let node = map.get(p);\r\n            if (node && (node.type !== \"not\")) {\r\n                node.oriData = {\r\n                    // hp: node.hp,\r\n                    atk: node.atk,\r\n                    def: node.def\r\n                }\r\n            }\r\n        })\r\n        // map.run((p)=>{\r\n        //     let node = map.get(p);\r\n        //     if (node && (node.type === \"me\" || node.type === \"en\")) {\r\n        //         // hjm._skill.add(counter, node.prePk, p, map, this.node.posMap);\r\n        //         // cc.log(\"node\", node.name, node.type, node);\r\n        //         counter(hjm._skill, \"add\", node.prePk, p, this.node.map, this.node.posMap);\r\n        //     }\r\n        // })\r\n        // this.isAtk = \"notAtk\";\r\n        // this.isDef = \"notDef\";\r\n        counter();\r\n    },\r\n\r\n    resetState (counter) {\r\n        let map = this.node.map;\r\n        map.run((p)=>{\r\n            let node = map.get(p);\r\n            if (node && (node.type === \"me\" || node.type === \"en\")) {\r\n                // hjm._skill.add(counter, node.prePk, p, map, this.node.posMap);\r\n                // cc.log(\"node\", node.name, node.type, node);\r\n                counter(hjm._skill, \"add\", node.stateFun, p, this.node.map, this.node.posMap);\r\n            }\r\n        })\r\n        // this.isAtk = \"notAtk\";\r\n        // this.isDef = \"notDef\";\r\n        counter();\r\n    },\r\n\r\n\r\n    // saveTouch (tp) {\r\n    //     if (!this.touchTp) {\r\n    //         this.play(tp);\r\n    //     }\r\n    // }, \r\n\r\n    // endPlay (end, tp) {\r\n    //     cc.log(\"endPlay\");\r\n    //     let moveNode = this.node.map.get(tp);\r\n    //     moveNode.parent = moveNode.oriParent;\r\n    //     let map = this.node.map;\r\n    //     map.run((p)=>{\r\n    //         let node = map.get(p);\r\n    //         if (node && (node.type !== \"not\")) {\r\n    //             // node.hp = node.oriData.hp;\r\n    //             node.atk = node.oriData.atk;\r\n    //             node.def = node.oriData.def;\r\n    //         }\r\n    //     })\r\n    //     if (this.atkNode) {\r\n    //         this.atkNode.reset();\r\n    //     }\r\n    //     if (this.defNode) {\r\n    //         this.defNode.reset();\r\n    //     }\r\n    //     // this.checkDie();\r\n    //     this.delTouch();\r\n    //     if (this.endAns) {\r\n    //         this.node.touch = \"end\";\r\n    //         hjm._end.add(this.endAns, 0.3);\r\n    //     }\r\n    //     end();\r\n    // },\r\n\r\n    // run (end, tp, dir) {\r\n    //     let ntp = dir.add(tp);\r\n    //     let move = cc.moveTo(0.2, this.node.posMap.get(ntp));\r\n    //     // move.add = -3;\r\n    //     let node = this.node.map.get(tp);\r\n    //     dyl.run(node, move, ()=>{\r\n    //         this.node.map.set(tp, null);\r\n    //         this.node.map.set(ntp, node);\r\n    //         tp.x = ntp.x;\r\n    //         tp.y = ntp.y;\r\n    //     }, end);\r\n    // },\r\n\r\n    getDir (tp) {\r\n        let map = this.node.map;\r\n        if (!map.get(tp)) {\r\n            return null;\r\n        }\r\n        let dirArr = dyl.addDirArr();\r\n        for (let i = 0; i < 4; i++) {\r\n            let dir = dirArr[i];\r\n            let ntp = dir.add(tp);\r\n            if (map.get(ntp) === null) {\r\n                return dir;\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n    // update (dt) {},\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        buttonLayer: cc.Node,\r\n    },\r\n\r\n    onLoad: function () {\r\n        this.say = hjm._say.getComponent(cc.Label);\r\n\r\n        this.read(hjm.level);\r\n        // setTimeout(()=>{\r\n        //     this.node._say.y = -700;\r\n        // }, 10000);\r\n    },\r\n\r\n    touchOn: function (p) {\r\n        let arr = this.buttonLayer.getChildren();\r\n        p.subSelf(this.buttonLayer);\r\n        let button = p.in(...arr);\r\n        if (button) {\r\n            this[button.name + \"On\"](p);\r\n        }\r\n    },\r\n\r\n    shopOn: function (p) {\r\n        cc.log(\"shopOn\");\r\n        hjm._shop.add(null, 0.3);\r\n    },\r\n\r\n    stateOn: function (p) {\r\n        cc.log(\"stateOn\");\r\n        hjm._state.add(null, 0.3);\r\n    },\r\n\r\n    playOn: function (p) {\r\n        cc.director.loadScene(\"play\");\r\n    },\r\n\r\n    read: function (id) {\r\n        // let name = String(id);\r\n        // let data = dyl.data.card[id];\r\n        let data = {};\r\n        dyl.data(\"card.\" + String(id), data);\r\n        if (data.type === \"shop\") {\r\n            this.readShop(data);\r\n        }\r\n        else {\r\n            this.readEn(data);\r\n        }\r\n    },\r\n\r\n    readShop: function (data) {\r\n        hjm._enCard.active = false;\r\n        hjm._shopCard.active = true;\r\n        hjm._playOpen.active = true;\r\n        hjm._playFight.active = false;\r\n\r\n        this.say.string = data.chName + \": \\n        \" + data.say;\r\n    },\r\n\r\n    readEn: function (data) {\r\n        hjm._enCard.active = true;\r\n        hjm._shopCard.active = false;\r\n        hjm._playOpen.active = false;\r\n        hjm._playFight.active = true;\r\n        // this.node._enCard.add(\"en/\" + data.name);\r\n        this.setSpr(hjm._enCard, \"en/\" + data.enName);\r\n        this.say.string = data.chName + \": \\n        \" + data.say;\r\n    },\r\n\r\n    setSpr: function (node, path) {\r\n        cc.loader.loadRes(path, cc.SpriteFrame, (err, sprr)=>{\r\n            let sprite = node.getComponent(cc.Sprite);\r\n            sprite.spriteFrame = sprr;\r\n        });\r\n    }\r\n});\r\n","\"use strict\";\r\n\r\nwindow.initHjmDataFun = function () {\r\n\tcc.log(\"initHjmDataFun\");\r\n\t_hjm(\"level\", 0);\r\n\t_hjm(\"coin\", 50);\r\n\t_hjm(\"atk\", \"slingshot\");\r\n\t_hjm(\"atkArr\", [\"slingshot\"]);\r\n\t_hjm(\"atkShopArr\", [\"slingshot\", \"wizard-staff\", \"crossed-swords\", \"trefoil-shuriken\", \"thor-hammer\"]);\r\n\t_hjm(\"def\", \"templar-shield\");\r\n\t_hjm(\"defArr\", [\"templar-shield\"]);\r\n\t_hjm(\"defShopArr\", [\"templar-shield\", \"black-hand-shield\"]);\r\n\r\n\t_hjm(\"heroData\", {\r\n\t\thp: 4,\r\n\t\tatk: 2,\r\n\t\tdef: 1\r\n\t});\r\n};\r\n\r\nif (window.isCryptoJS && window.initHjmFun && window.initDylFun) {\r\n\tcc.log(\"init hjmData\");\r\n\twindow.initDylFun(window.isCryptoJS);\r\n\twindow.initHjmFun();\r\n\twindow.initHjmDataFun();\r\n}","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    },\r\n\r\n    onLoad () {\r\n        this.node.type = \"me\";\r\n        this.node.stateFun = \"notState\";\r\n\r\n        let data = hjm.heroData;\r\n        for (let i in data) {\r\n        \tthis.node[i] = data[i];\r\n        }\r\n    },\r\n\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    },\r\n\r\n    onLoad () {\r\n        this.node.type = \"not\";\r\n    },\r\n\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        w: 5,\r\n        h: 3,\r\n        // wl: 300,\r\n        // hl: 200,\r\n        toolLayer: cc.Node,\r\n\r\n        buttonLayer: cc.Node,\r\n        defBg: cc.Node,\r\n        chooseSpr: cc.Node,\r\n        dataNode: cc.Node,\r\n        pool: cc.Node,\r\n    },\r\n\r\n    onLoad () {\r\n        cc.shop = this;\r\n        this.posArr = this.initPosArr();\r\n        let tab = {};\r\n        let atkArr = hjm.atkArr;\r\n        let defArr = hjm.defArr;\r\n        for (let i = atkArr.length - 1; i >= 0; i--) {\r\n            tab[atkArr[i]] = true;\r\n        }\r\n        for (let i = defArr.length - 1; i >= 0; i--) {\r\n            tab[defArr[i]] = true;\r\n        }\r\n        this.toolTab = tab;\r\n        // this.maxShowNum = this.w * this.h;\r\n        // this.pageNum = 0;\r\n        this.setType(\"atk\");\r\n    },\r\n\r\n\r\n    touchOn (p) {\r\n        let touchNode = p.in(...this.buttonLayer.getChildren());\r\n        if (touchNode) {\r\n            this[touchNode.name + \"On\"](p);\r\n        }\r\n    },\r\n\r\n    chooseTool (node) {\r\n        cc.log(\"chooseTool\");\r\n        if (!node) { //没有选中物品的状态\r\n            this.chooseSpr.x = -2000;\r\n            this.chooseNode = null;\r\n            this.setData(\"default\");\r\n        }\r\n        else {\r\n            this.chooseSpr.setPosition(node);\r\n            this.chooseNode = node;\r\n            this.setData(node.name);\r\n        }\r\n    },\r\n\r\n    setData (name) {\r\n        cc.log(\"setData\");\r\n        dyl.data(this.type + \".\" + name, this.dataNode);\r\n        this.dataNode.hp = this.dataNode[this.type];\r\n        hjm[name] = this.dataNode.tool;\r\n    },\r\n\r\n    atkOn () {\r\n        cc.log(\"atkOn\");\r\n        this.setType(\"atk\");\r\n    },\r\n\r\n    defOn () {\r\n        cc.log(\"defOn\");\r\n        this.setType(\"def\");\r\n    },\r\n\r\n    nextOn () {\r\n        cc.log(\"nextOn\");\r\n        this.setPage(this.pageNum + 1);\r\n    },\r\n\r\n    buyOn () {\r\n        cc.log(\"buyOn\");\r\n        if (this.chooseNode) {\r\n            if (this.toolTab[this.chooseNode.name]) {\r\n                return;\r\n            }\r\n            // if (this.chooseNode.has.active) {\r\n            //     return;\r\n            // }\r\n            else if (this.chooseNode.coin > hjm.coin) {\r\n                return;\r\n            }\r\n            else {\r\n                // this.chooseNode.has.active = true;\r\n                this.chooseNode.getChildByName(\"coin\").color = cc.color(0, 255, 0);\r\n                let name = this.chooseNode.name;\r\n                this.toolTab[name] = true;\r\n                hjm[this.type + \"Arr\"].push(name);\r\n                hjm.coin -= this.chooseNode.coin;\r\n                this.chooseNode.coin = \"已拥有\";\r\n\r\n                for (let i = this.arr.length - 1; i >= 0; i--) {\r\n                    let node = this.arr[i];\r\n                    if (this.toolTab[node.name]) {\r\n                        continue;\r\n                    }\r\n                    if (node.coin > hjm.coin) {\r\n                        node.getChildByName(\"coin\").color = cc.color(255, 0, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    chooseOn (p) {\r\n        cc.log(\"chooseOn\");\r\n        let tool = p.in(...this.toolArr);\r\n        if (tool && tool.active) {\r\n            this.chooseTool(tool);\r\n        }\r\n    },\r\n\r\n    backOn (p) {\r\n        this.node.add(null, -0.3);\r\n    },\r\n\r\n    setType (type) {\r\n        cc.log(\"setType\");\r\n        this.type = type;\r\n        this.defBg.active = (type === \"def\");\r\n        this.setArr(hjm[type + \"ShopArr\"]);\r\n        this.chooseTool();\r\n    },\r\n\r\n    setArr (arr) {\r\n        cc.log(\"setArr\");\r\n        this.arr = arr;\r\n        this.setPage(0);\r\n    },\r\n\r\n    initTool (node, name) {\r\n        cc.log(\"initTool\");\r\n        dyl.data(this.type + \".\" + name, node);\r\n        hjm[name] = node.tool;\r\n        node.name = name;\r\n        if (this.toolTab[name]) {\r\n            // node.has.active = true;\r\n            node.coin = \"已拥有\";\r\n            node.getChildByName(\"coin\").color = cc.color(0, 255, 0);\r\n            // node.notMoney.active = false;\r\n        }\r\n        else if (node.coin > hjm.coin) {\r\n            // node.has.active = false;\r\n            // node.notMoney.active = true;\r\n            node.getChildByName(\"coin\").color = cc.color(255, 0, 0);\r\n        }\r\n        else {\r\n            node.getChildByName(\"coin\").color = cc.color(168, 80, 0);\r\n            // node.has.active = false;\r\n            // node.notMoney.active = false;\r\n        }\r\n    },\r\n\r\n    setPage (num) {\r\n        cc.log(\"setPage\");\r\n        if (num < 0) {\r\n            return false;\r\n        }\r\n        let maxShowNum = this.w * this.h;  \r\n        let id = maxShowNum * num;\r\n        if (id >= this.arr.length) {\r\n            return false;\r\n        }\r\n        this.pageNum = num;\r\n        if (id + maxShowNum > this.arr.length) {\r\n            for (let i = id; i < this.arr.length; i++) {\r\n                let node = this.toolArr[i];\r\n                node.active = true;\r\n                this.initTool(node, this.arr[i]);                \r\n            }\r\n\r\n            for (let i = this.arr.length; i < id + maxShowNum; i++) {\r\n                this.toolArr[i].active = false;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = id; i < id + maxShowNum; i++) {\r\n                let node = this.toolArr[i];\r\n                node.active = true;\r\n                this.initTool(node, this.toolArr[i]);\r\n            }\r\n        }\r\n        this.chooseTool();\r\n    },\r\n\r\n    initPosArr () {\r\n        cc.log(\"initPosArr\");\r\n        let {w, h} = this;\r\n        let size = dyl.getSize(this.toolLayer);\r\n        let wl = size.x / w;\r\n        let hl = size.y / h;\r\n        let oriX = -wl * (w - 1) * 0.5;\r\n        let oriY = hl * (h - 1) * 0.5 + this.toolLayer.y;\r\n        let posArr = [];\r\n        let toolArr = [];\r\n        dyl.addMap(w, h, (p)=>{\r\n            let {x, y} = p;\r\n            let n = y * w + x;\r\n            posArr[n] = cc.p(oriX + x * wl, oriY - y * hl);\r\n            let node = this.pool.add();\r\n            node.setPosition(posArr[n]);\r\n            node.active = false;\r\n            toolArr.push(node);\r\n        });\r\n        this.toolArr = toolArr;\r\n        this.posArr = posArr;\r\n    },\r\n\r\n    resetUi () {\r\n\r\n    },\r\n\r\n\r\n\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    },\r\n\r\n    onLoad () {\r\n        let self = this;\r\n        // this.node.add = (end, skillName, ...arr)=>{\r\n        this.node.add = (end, skillName, tp, map, posMap)=>{\r\n            cc.log(\"skillName\", skillName);\r\n            // cc.log(\"type\", tp, map.get(tp), map.get(tp, \"type\"));\r\n            if (map.get(tp, \"type\") === \"not\") {\r\n                // cc.log(\"这个对象不存在了\");\r\n                end();\r\n                return;\r\n            }\r\n            if (typeof self[skillName] !== \"function\") {\r\n                cc.warn(\"没有这个技能\", skillName);\r\n                end();\r\n            }\r\n            this.tp = tp;\r\n            this.map = map;\r\n            this.posMap = posMap;\r\n            self[skillName](end, tp, map, posMap);\r\n        }\r\n    },\r\n\r\n    fun_getQueue () {\r\n        let arr = [];\r\n        let id = 0;\r\n        let queue = {};\r\n        queue.push = function (value) {\r\n            arr.push(value);\r\n        }\r\n        queue.pop = function () {\r\n            if (id >= arr.length) {\r\n                return null;\r\n            }\r\n            return arr[id++];\r\n        }\r\n        return queue;\r\n    },\r\n\r\n    fun_getDirArr () {\r\n        let {tp, map} = this;\r\n        let atkNode = map.get(tp);\r\n        let enType = (atkNode.type === \"me\") ? \"en\" : \"me\";\r\n        let dirArr = dyl.addDirArr();\r\n        let arr = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            let np = dirArr[i].add(tp);\r\n            if (map.get(np, \"type\") === enType) {\r\n                arr.push(dirArr[i]);\r\n            }\r\n        }\r\n        return arr;\r\n    },\r\n\r\n    act_notFront (np, dir, f = 1) {\r\n        let {tp, map} = this;\r\n        let nowNode = map.get(tp);\r\n        // let dir = np.sub(tp);\r\n        let back = cc.moveBy(0.3, dir.mul(-100 * f));\r\n        back.node = nowNode;\r\n        back.add = 0.6;\r\n\r\n        let go = cc.moveBy(0.05, dir.mul(120 * f));\r\n        go.node = nowNode;\r\n        go.add = 1.5;\r\n        return [back, go];\r\n    },\r\n\r\n    act_notBack (np, dir, f = 1) {\r\n        let {tp, map, posMap} = this;\r\n        let nowNode = map.get(tp);\r\n        let nextNode = map.get(np);\r\n        // let dir = np.sub(tp);\r\n        let back1 = cc.moveBy(0.1, dir.mul(-20 * f));\r\n        back1.node = nowNode;\r\n        let back2 = cc.moveBy(0.1, dir.mul(30 * f));\r\n        back2.node = nextNode;\r\n        back2.add = 0.6;\r\n        let reset1 = cc.moveTo(0.05, posMap.get(tp));\r\n        reset1.node = nowNode;\r\n        let reset2 = cc.moveTo(0.05, posMap.get(np));\r\n        reset2.node = nextNode;\r\n        return [[back1, back2], [reset1, reset2], 0.3];\r\n    },\r\n\r\n    act_arrBack (arr, dir, f = 1) {\r\n        let arr0 = [];\r\n        let arr1 = [];\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            let notBackArr = this.act_notBack(arr[i], dir, f);\r\n            arr0.push(...notBackArr[0]);\r\n            arr1.push(...notBackArr[1]);\r\n        }\r\n        return [arr0, arr1, 0.3];\r\n    },\r\n\r\n    act_rotateArrBack (dirArr) {\r\n        let {tp, map, posMap} = this;\r\n\r\n        let backArr1 = [];\r\n        let backArr2 = [];\r\n        for (let i = dirArr.length - 1; i >= 0; i--) {\r\n            let dir = dirArr[i];\r\n            let np = dir.add(tp);\r\n            let move1 = cc.moveBy(0.1, dir.mul(30));\r\n            move1.node = map.get(np);\r\n            backArr1.push(move1);\r\n\r\n            let move2 = cc.moveTo(0.05, posMap.get(np));\r\n            move2.node = map.get(np);\r\n            backArr2.push(move2);\r\n        }\r\n        return [0.2, backArr1, backArr2];\r\n    },\r\n\r\n    act_rotate (np) {\r\n        let {map} = this;\r\n        let node = map.get(np);\r\n        node.setScale(1.2);\r\n        let rotate = cc.rotateTo(0.35, 720);\r\n        rotate.node = map.get(np);\r\n        return [rotate, ()=>node.setScale(1)];\r\n    },\r\n\r\n    fun_rotate (dirArr) {\r\n        let {tp, map} = this;\r\n        for (let i = dirArr.length - 1; i >= 0; i--) {\r\n            this.fun_atk(dirArr[i].add(tp));\r\n        }\r\n    },\r\n\r\n    fun_atk (np, r = 1) {\r\n        // cc.log(\"notAtk\", atkNode.atk, defNode.def);\r\n        let {tp, map} = this;\r\n        let atkNode = this.map.get(tp);\r\n        let defNode = this.map.get(np);\r\n        let hurtNum = 0;\r\n        if (atkNode.atk * r > defNode.def) {\r\n            hurtNum = atkNode.atk * r - defNode.def;\r\n        }\r\n        // hurtNum *= r;\r\n        hurtNum = Math.floor(hurtNum);\r\n        let defFunName = defNode.defFun;\r\n        // cc.log(\"defFunName--------\", defFunName, \"ddd\");\r\n        if (this[defFunName]) {\r\n            this[defFunName](hurtNum, atkNode, defNode);\r\n        }\r\n        else {\r\n            this.notDef(hurtNum, atkNode, defNode);\r\n        }\r\n    },\r\n\r\n    fun_arrAtk (arr, r = 1) {\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            this.fun_atk(arr[i], r);\r\n        }\r\n    },\r\n\r\n    fun_getLinkArr (np) {\r\n        let {map} = this;\r\n        let type = map.get(np, \"type\");\r\n        let visit = dyl.addMap(map.w, map.h, ()=>false);\r\n        let queue = this.fun_getQueue();\r\n        queue.push(np);\r\n        let ans = [np];\r\n        visit.set(np, true);\r\n        while(true) {\r\n            let now = queue.pop();\r\n            if (!now) {\r\n                break;\r\n            }\r\n            let dirArr = dyl.addDirArr();\r\n            for (let i = 0; i < 4; i++) {\r\n                let p = now.add(dirArr[i]);\r\n                if (map.get(p, \"type\") === type && !visit.get(p)) {\r\n                    visit.set(p, true);\r\n                    ans.push(p);\r\n                    queue.push(p);\r\n                }\r\n            }\r\n        }\r\n        return ans;\r\n    },\r\n\r\n    notBackDef (hurtNum, atkNode, defNode) {\r\n        cc.log(\"notBackDef\");\r\n        hurtNum = Math.floor(hurtNum);\r\n        defNode.hp -= hurtNum;\r\n        atkNode.hp -= 1;\r\n        hjm._hpLayer.add(defNode, -hurtNum);\r\n        hjm._hpLayer.add(atkNode, -1);\r\n    },\r\n\r\n    notDef (hurtNum, atkNode, defNode) {\r\n        cc.log(\"notDef\");\r\n        hurtNum = Math.floor(hurtNum);\r\n        defNode.hp -= hurtNum;\r\n        hjm._hpLayer.add(defNode, -hurtNum);\r\n    },\r\n\r\n    notAtk (end) {\r\n        let dir = this.fun_getDirArr()[0];\r\n        if (!dir) {\r\n            return end();\r\n        }\r\n        let np = dir.add(this.tp);\r\n        let atkFun = ()=>this.fun_atk(np);\r\n        let arr = [...this.act_notFront(np, dir), atkFun, ...this.act_notBack(np, dir)];\r\n        dyl.run(this.node, ...arr, end);\r\n    },\r\n\r\n    notState (end) {\r\n        return end();\r\n    },\r\n\r\n    friendState (end) {\r\n        let {tp, map} = this;\r\n        let node = map.get(tp);\r\n        let type = node.type;\r\n        let dirArr = dyl.addDirArr();\r\n        // node.atk--;\r\n        let atk = node.oriData.atk;\r\n        for (let i = 0; i < 4; i++) {\r\n            let np = dirArr[i].add(tp);\r\n            if (map.get(np, \"type\") === type) {\r\n                atk += 1;\r\n            }\r\n        }\r\n        node.atk = atk;\r\n        end();\r\n    },\r\n\r\n    bigAtk (end) {\r\n        let {tp, map} = this;\r\n        if (dyl.rand() > 0.5) {\r\n            return this.notAtk(end);\r\n        }\r\n        // cc.log(\"bigAtk\", tp);\r\n        let dir = this.fun_getDirArr()[0];\r\n        if (!dir) {\r\n            return end();\r\n        }\r\n        let np = dir.add(this.tp);\r\n        // cc.log(\"big\");\r\n        let scale1 = cc.scaleTo(0.1, 1.2);\r\n        scale1.node = map.get(tp);\r\n        let scale2 = cc.scaleTo(0.1, 1);\r\n        scale2.node = map.get(tp);\r\n        // let arr = [scale1, ...this.notAction1(tp, np, map, 1.5), ...this.notAction2(tp, np, map, posMap, 1.5), scale2];\r\n\r\n        let atkFun = ()=>this.fun_atk(np, 2);\r\n        let arr = [scale1, ...this.act_notFront(np, dir, 1.5), atkFun, ...this.act_notBack(np, dir, 1.5), scale2];\r\n\r\n        dyl.run(this.node, ...arr, end);\r\n    },\r\n\r\n    twoAtk (end) {\r\n        let tmpEnd = ()=>{\r\n            this.notAtk(end);\r\n        }  \r\n        this.notAtk(tmpEnd);\r\n    },\r\n\r\n    electricAtk (end) {\r\n        // cc.log(\"electricAtk\");\r\n        let dir = this.fun_getDirArr()[0];\r\n        if (!dir) {\r\n            return end();\r\n        }\r\n\r\n        let arr = this.fun_getLinkArr(this.tp.add(dir));\r\n\r\n\r\n        let atkFun = ()=>this.fun_arrAtk(arr);\r\n        let seqArr = [...this.act_notFront(dir.mul(this.tp), dir), atkFun, ...this.act_arrBack(arr, dir)];\r\n        dyl.run(this.node, ...seqArr, end);\r\n    },\r\n\r\n    rotateAtk (end) {\r\n        let dirArr = this.fun_getDirArr();\r\n        if (dirArr.length < 1) {\r\n            return end();\r\n        }\r\n\r\n        let callId = 0;\r\n        let callBack = ()=>{\r\n            callId++;\r\n            if (callId === 3) {\r\n                end();\r\n            }\r\n        }\r\n\r\n        let rotateArr = this.act_rotateArrBack(dirArr);\r\n        let rotate = this.act_rotate(this.tp);\r\n        let fun = ()=>this.fun_rotate(dirArr);\r\n        dyl.run(...rotateArr, callBack);\r\n        dyl.run(...rotate, callBack);\r\n        dyl.run(0.25, fun, callBack);\r\n\r\n        // let np = dir.add(this.tp);\r\n        // let atkFun = ()=>this.fun_atk(np);\r\n        // let arr = [...this.act_notFront(np, dir), atkFun, ...this.act_notBack(np, dir)];\r\n        // dyl.run(this.node, ...arr, end);\r\n    },\r\n});\r\n","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    },\r\n\r\n    onLoad () {\r\n        cc.loader.loadRes(\"atk/wizard\", cc.SpriteFrame,  (err, spr)=>{\r\n        \tlet sprite = this.node.getComponent(cc.Sprite);\r\n            cc.log(sprite, spr, err);\r\n        \tsprite.spriteFrame = spr;\r\n        });\r\n    },\r\n\r\n});\r\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\nvar CryptoJS=CryptoJS||function(u,p){var d={},l=d.lib={},s=function(){},t=l.Base={extend:function(a){s.prototype=this;var c=new s;a&&c.mixIn(a);c.hasOwnProperty(\"init\")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},\nr=l.WordArray=t.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=p?c:4*a.length},toString:function(a){return(a||v).stringify(this)},concat:function(a){var c=this.words,e=a.words,j=this.sigBytes;a=a.sigBytes;this.clamp();if(j%4)for(var k=0;k<a;k++)c[j+k>>>2]|=(e[k>>>2]>>>24-8*(k%4)&255)<<24-8*((j+k)%4);else if(65535<e.length)for(k=0;k<a;k+=4)c[j+k>>>2]=e[k>>>2];else c.push.apply(c,e);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<\n32-8*(c%4);a.length=u.ceil(c/4)},clone:function(){var a=t.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],e=0;e<a;e+=4)c.push(4294967296*u.random()|0);return new r.init(c,a)}}),w=d.enc={},v=w.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j<a;j++){var k=c[j>>>2]>>>24-8*(j%4)&255;e.push((k>>>4).toString(16));e.push((k&15).toString(16))}return e.join(\"\")},parse:function(a){for(var c=a.length,e=[],j=0;j<c;j+=2)e[j>>>3]|=parseInt(a.substr(j,\n2),16)<<24-4*(j%8);return new r.init(e,c/2)}},b=w.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j<a;j++)e.push(String.fromCharCode(c[j>>>2]>>>24-8*(j%4)&255));return e.join(\"\")},parse:function(a){for(var c=a.length,e=[],j=0;j<c;j++)e[j>>>2]|=(a.charCodeAt(j)&255)<<24-8*(j%4);return new r.init(e,c)}},x=w.Utf8={stringify:function(a){try{return decodeURIComponent(escape(b.stringify(a)))}catch(c){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return b.parse(unescape(encodeURIComponent(a)))}},\nq=l.BufferedBlockAlgorithm=t.extend({reset:function(){this._data=new r.init;this._nDataBytes=0},_append:function(a){\"string\"==typeof a&&(a=x.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,e=c.words,j=c.sigBytes,k=this.blockSize,b=j/(4*k),b=a?u.ceil(b):u.max((b|0)-this._minBufferSize,0);a=b*k;j=u.min(4*a,j);if(a){for(var q=0;q<a;q+=k)this._doProcessBlock(e,q);q=e.splice(0,a);c.sigBytes-=j}return new r.init(q,j)},clone:function(){var a=t.clone.call(this);\na._data=this._data.clone();return a},_minBufferSize:0});l.Hasher=q.extend({cfg:t.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){q.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(b,e){return(new a.init(e)).finalize(b)}},_createHmacHelper:function(a){return function(b,e){return(new n.HMAC.init(a,\ne)).finalize(b)}}});var n=d.algo={};return d}(Math);\n(function(){var u=CryptoJS,p=u.lib.WordArray;u.enc.Base64={stringify:function(d){var l=d.words,p=d.sigBytes,t=this._map;d.clamp();d=[];for(var r=0;r<p;r+=3)for(var w=(l[r>>>2]>>>24-8*(r%4)&255)<<16|(l[r+1>>>2]>>>24-8*((r+1)%4)&255)<<8|l[r+2>>>2]>>>24-8*((r+2)%4)&255,v=0;4>v&&r+0.75*v<p;v++)d.push(t.charAt(w>>>6*(3-v)&63));if(l=t.charAt(64))for(;d.length%4;)d.push(l);return d.join(\"\")},parse:function(d){var l=d.length,s=this._map,t=s.charAt(64);t&&(t=d.indexOf(t),-1!=t&&(l=t));for(var t=[],r=0,w=0;w<\nl;w++)if(w%4){var v=s.indexOf(d.charAt(w-1))<<2*(w%4),b=s.indexOf(d.charAt(w))>>>6-2*(w%4);t[r>>>2]|=(v|b)<<24-8*(r%4);r++}return p.create(t,r)},_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"}})();\n(function(u){function p(b,n,a,c,e,j,k){b=b+(n&a|~n&c)+e+k;return(b<<j|b>>>32-j)+n}function d(b,n,a,c,e,j,k){b=b+(n&c|a&~c)+e+k;return(b<<j|b>>>32-j)+n}function l(b,n,a,c,e,j,k){b=b+(n^a^c)+e+k;return(b<<j|b>>>32-j)+n}function s(b,n,a,c,e,j,k){b=b+(a^(n|~c))+e+k;return(b<<j|b>>>32-j)+n}for(var t=CryptoJS,r=t.lib,w=r.WordArray,v=r.Hasher,r=t.algo,b=[],x=0;64>x;x++)b[x]=4294967296*u.abs(u.sin(x+1))|0;r=r.MD5=v.extend({_doReset:function(){this._hash=new w.init([1732584193,4023233417,2562383102,271733878])},\n_doProcessBlock:function(q,n){for(var a=0;16>a;a++){var c=n+a,e=q[c];q[c]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360}var a=this._hash.words,c=q[n+0],e=q[n+1],j=q[n+2],k=q[n+3],z=q[n+4],r=q[n+5],t=q[n+6],w=q[n+7],v=q[n+8],A=q[n+9],B=q[n+10],C=q[n+11],u=q[n+12],D=q[n+13],E=q[n+14],x=q[n+15],f=a[0],m=a[1],g=a[2],h=a[3],f=p(f,m,g,h,c,7,b[0]),h=p(h,f,m,g,e,12,b[1]),g=p(g,h,f,m,j,17,b[2]),m=p(m,g,h,f,k,22,b[3]),f=p(f,m,g,h,z,7,b[4]),h=p(h,f,m,g,r,12,b[5]),g=p(g,h,f,m,t,17,b[6]),m=p(m,g,h,f,w,22,b[7]),\nf=p(f,m,g,h,v,7,b[8]),h=p(h,f,m,g,A,12,b[9]),g=p(g,h,f,m,B,17,b[10]),m=p(m,g,h,f,C,22,b[11]),f=p(f,m,g,h,u,7,b[12]),h=p(h,f,m,g,D,12,b[13]),g=p(g,h,f,m,E,17,b[14]),m=p(m,g,h,f,x,22,b[15]),f=d(f,m,g,h,e,5,b[16]),h=d(h,f,m,g,t,9,b[17]),g=d(g,h,f,m,C,14,b[18]),m=d(m,g,h,f,c,20,b[19]),f=d(f,m,g,h,r,5,b[20]),h=d(h,f,m,g,B,9,b[21]),g=d(g,h,f,m,x,14,b[22]),m=d(m,g,h,f,z,20,b[23]),f=d(f,m,g,h,A,5,b[24]),h=d(h,f,m,g,E,9,b[25]),g=d(g,h,f,m,k,14,b[26]),m=d(m,g,h,f,v,20,b[27]),f=d(f,m,g,h,D,5,b[28]),h=d(h,f,\nm,g,j,9,b[29]),g=d(g,h,f,m,w,14,b[30]),m=d(m,g,h,f,u,20,b[31]),f=l(f,m,g,h,r,4,b[32]),h=l(h,f,m,g,v,11,b[33]),g=l(g,h,f,m,C,16,b[34]),m=l(m,g,h,f,E,23,b[35]),f=l(f,m,g,h,e,4,b[36]),h=l(h,f,m,g,z,11,b[37]),g=l(g,h,f,m,w,16,b[38]),m=l(m,g,h,f,B,23,b[39]),f=l(f,m,g,h,D,4,b[40]),h=l(h,f,m,g,c,11,b[41]),g=l(g,h,f,m,k,16,b[42]),m=l(m,g,h,f,t,23,b[43]),f=l(f,m,g,h,A,4,b[44]),h=l(h,f,m,g,u,11,b[45]),g=l(g,h,f,m,x,16,b[46]),m=l(m,g,h,f,j,23,b[47]),f=s(f,m,g,h,c,6,b[48]),h=s(h,f,m,g,w,10,b[49]),g=s(g,h,f,m,\nE,15,b[50]),m=s(m,g,h,f,r,21,b[51]),f=s(f,m,g,h,u,6,b[52]),h=s(h,f,m,g,k,10,b[53]),g=s(g,h,f,m,B,15,b[54]),m=s(m,g,h,f,e,21,b[55]),f=s(f,m,g,h,v,6,b[56]),h=s(h,f,m,g,x,10,b[57]),g=s(g,h,f,m,t,15,b[58]),m=s(m,g,h,f,D,21,b[59]),f=s(f,m,g,h,z,6,b[60]),h=s(h,f,m,g,C,10,b[61]),g=s(g,h,f,m,j,15,b[62]),m=s(m,g,h,f,A,21,b[63]);a[0]=a[0]+f|0;a[1]=a[1]+m|0;a[2]=a[2]+g|0;a[3]=a[3]+h|0},_doFinalize:function(){var b=this._data,n=b.words,a=8*this._nDataBytes,c=8*b.sigBytes;n[c>>>5]|=128<<24-c%32;var e=u.floor(a/\n4294967296);n[(c+64>>>9<<4)+15]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360;n[(c+64>>>9<<4)+14]=(a<<8|a>>>24)&16711935|(a<<24|a>>>8)&4278255360;b.sigBytes=4*(n.length+1);this._process();b=this._hash;n=b.words;for(a=0;4>a;a++)c=n[a],n[a]=(c<<8|c>>>24)&16711935|(c<<24|c>>>8)&4278255360;return b},clone:function(){var b=v.clone.call(this);b._hash=this._hash.clone();return b}});t.MD5=v._createHelper(r);t.HmacMD5=v._createHmacHelper(r)})(Math);\n(function(){var u=CryptoJS,p=u.lib,d=p.Base,l=p.WordArray,p=u.algo,s=p.EvpKDF=d.extend({cfg:d.extend({keySize:4,hasher:p.MD5,iterations:1}),init:function(d){this.cfg=this.cfg.extend(d)},compute:function(d,r){for(var p=this.cfg,s=p.hasher.create(),b=l.create(),u=b.words,q=p.keySize,p=p.iterations;u.length<q;){n&&s.update(n);var n=s.update(d).finalize(r);s.reset();for(var a=1;a<p;a++)n=s.finalize(n),s.reset();b.concat(n)}b.sigBytes=4*q;return b}});u.EvpKDF=function(d,l,p){return s.create(p).compute(d,\nl)}})();\nCryptoJS.lib.Cipher||function(u){var p=CryptoJS,d=p.lib,l=d.Base,s=d.WordArray,t=d.BufferedBlockAlgorithm,r=p.enc.Base64,w=p.algo.EvpKDF,v=d.Cipher=t.extend({cfg:l.extend(),createEncryptor:function(e,a){return this.create(this._ENC_XFORM_MODE,e,a)},createDecryptor:function(e,a){return this.create(this._DEC_XFORM_MODE,e,a)},init:function(e,a,b){this.cfg=this.cfg.extend(b);this._xformMode=e;this._key=a;this.reset()},reset:function(){t.reset.call(this);this._doReset()},process:function(e){this._append(e);return this._process()},\nfinalize:function(e){e&&this._append(e);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(e){return{encrypt:function(b,k,d){return(\"string\"==typeof k?c:a).encrypt(e,b,k,d)},decrypt:function(b,k,d){return(\"string\"==typeof k?c:a).decrypt(e,b,k,d)}}}});d.StreamCipher=v.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var b=p.mode={},x=function(e,a,b){var c=this._iv;c?this._iv=u:c=this._prevBlock;for(var d=0;d<b;d++)e[a+d]^=\nc[d]},q=(d.BlockCipherMode=l.extend({createEncryptor:function(e,a){return this.Encryptor.create(e,a)},createDecryptor:function(e,a){return this.Decryptor.create(e,a)},init:function(e,a){this._cipher=e;this._iv=a}})).extend();q.Encryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize;x.call(this,e,a,c);b.encryptBlock(e,a);this._prevBlock=e.slice(a,a+c)}});q.Decryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize,d=e.slice(a,a+c);b.decryptBlock(e,a);x.call(this,\ne,a,c);this._prevBlock=d}});b=b.CBC=q;q=(p.pad={}).Pkcs7={pad:function(a,b){for(var c=4*b,c=c-a.sigBytes%c,d=c<<24|c<<16|c<<8|c,l=[],n=0;n<c;n+=4)l.push(d);c=s.create(l,c);a.concat(c)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};d.BlockCipher=v.extend({cfg:v.cfg.extend({mode:b,padding:q}),reset:function(){v.reset.call(this);var a=this.cfg,b=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var c=a.createEncryptor;else c=a.createDecryptor,this._minBufferSize=1;this._mode=c.call(a,\nthis,b&&b.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var n=d.CipherParams=l.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),b=(p.format={}).OpenSSL={stringify:function(a){var b=a.ciphertext;a=a.salt;return(a?s.create([1398893684,\n1701076831]).concat(a).concat(b):b).toString(r)},parse:function(a){a=r.parse(a);var b=a.words;if(1398893684==b[0]&&1701076831==b[1]){var c=s.create(b.slice(2,4));b.splice(0,4);a.sigBytes-=16}return n.create({ciphertext:a,salt:c})}},a=d.SerializableCipher=l.extend({cfg:l.extend({format:b}),encrypt:function(a,b,c,d){d=this.cfg.extend(d);var l=a.createEncryptor(c,d);b=l.finalize(b);l=l.cfg;return n.create({ciphertext:b,key:c,iv:l.iv,algorithm:a,mode:l.mode,padding:l.padding,blockSize:a.blockSize,formatter:d.format})},\ndecrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return\"string\"==typeof a?b.parse(a,this):a}}),p=(p.kdf={}).OpenSSL={execute:function(a,b,c,d){d||(d=s.random(8));a=w.create({keySize:b+c}).compute(a,d);c=s.create(a.words.slice(b),4*c);a.sigBytes=4*b;return n.create({key:a,iv:c,salt:d})}},c=d.PasswordBasedCipher=a.extend({cfg:a.cfg.extend({kdf:p}),encrypt:function(b,c,d,l){l=this.cfg.extend(l);d=l.kdf.execute(d,\nb.keySize,b.ivSize);l.iv=d.iv;b=a.encrypt.call(this,b,c,d.key,l);b.mixIn(d);return b},decrypt:function(b,c,d,l){l=this.cfg.extend(l);c=this._parse(c,l.format);d=l.kdf.execute(d,b.keySize,b.ivSize,c.salt);l.iv=d.iv;return a.decrypt.call(this,b,c,d.key,l)}})}();\n(function(){for(var u=CryptoJS,p=u.lib.BlockCipher,d=u.algo,l=[],s=[],t=[],r=[],w=[],v=[],b=[],x=[],q=[],n=[],a=[],c=0;256>c;c++)a[c]=128>c?c<<1:c<<1^283;for(var e=0,j=0,c=0;256>c;c++){var k=j^j<<1^j<<2^j<<3^j<<4,k=k>>>8^k&255^99;l[e]=k;s[k]=e;var z=a[e],F=a[z],G=a[F],y=257*a[k]^16843008*k;t[e]=y<<24|y>>>8;r[e]=y<<16|y>>>16;w[e]=y<<8|y>>>24;v[e]=y;y=16843009*G^65537*F^257*z^16843008*e;b[k]=y<<24|y>>>8;x[k]=y<<16|y>>>16;q[k]=y<<8|y>>>24;n[k]=y;e?(e=z^a[a[a[G^z]]],j^=a[a[j]]):e=j=1}var H=[0,1,2,4,8,\n16,32,64,128,27,54],d=d.AES=p.extend({_doReset:function(){for(var a=this._key,c=a.words,d=a.sigBytes/4,a=4*((this._nRounds=d+6)+1),e=this._keySchedule=[],j=0;j<a;j++)if(j<d)e[j]=c[j];else{var k=e[j-1];j%d?6<d&&4==j%d&&(k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255]):(k=k<<8|k>>>24,k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255],k^=H[j/d|0]<<24);e[j]=e[j-d]^k}c=this._invKeySchedule=[];for(d=0;d<a;d++)j=a-d,k=d%4?e[j]:e[j-4],c[d]=4>d||4>=j?k:b[l[k>>>24]]^x[l[k>>>16&255]]^q[l[k>>>\n8&255]]^n[l[k&255]]},encryptBlock:function(a,b){this._doCryptBlock(a,b,this._keySchedule,t,r,w,v,l)},decryptBlock:function(a,c){var d=a[c+1];a[c+1]=a[c+3];a[c+3]=d;this._doCryptBlock(a,c,this._invKeySchedule,b,x,q,n,s);d=a[c+1];a[c+1]=a[c+3];a[c+3]=d},_doCryptBlock:function(a,b,c,d,e,j,l,f){for(var m=this._nRounds,g=a[b]^c[0],h=a[b+1]^c[1],k=a[b+2]^c[2],n=a[b+3]^c[3],p=4,r=1;r<m;r++)var q=d[g>>>24]^e[h>>>16&255]^j[k>>>8&255]^l[n&255]^c[p++],s=d[h>>>24]^e[k>>>16&255]^j[n>>>8&255]^l[g&255]^c[p++],t=\nd[k>>>24]^e[n>>>16&255]^j[g>>>8&255]^l[h&255]^c[p++],n=d[n>>>24]^e[g>>>16&255]^j[h>>>8&255]^l[k&255]^c[p++],g=q,h=s,k=t;q=(f[g>>>24]<<24|f[h>>>16&255]<<16|f[k>>>8&255]<<8|f[n&255])^c[p++];s=(f[h>>>24]<<24|f[k>>>16&255]<<16|f[n>>>8&255]<<8|f[g&255])^c[p++];t=(f[k>>>24]<<24|f[n>>>16&255]<<16|f[g>>>8&255]<<8|f[h&255])^c[p++];n=(f[n>>>24]<<24|f[g>>>16&255]<<16|f[h>>>8&255]<<8|f[k&255])^c[p++];a[b]=q;a[b+1]=s;a[b+2]=t;a[b+3]=n},keySize:8});u.AES=p._createHelper(d)})();\n\ncc.log(\"aes\");\nif (window.initHjmDataFun && window.initHjmFun && window.initDylFun) {\n\twindow.initDylFun(CryptoJS);\n\twindow.initHjmFun();\n    window.initHjmDataFun();\n}\nelse {\n\twindow.isCryptoJS = CryptoJS;\n}","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    },\r\n\r\n    start () {\r\n        this.node.js = this;\r\n        this.touchData = null;\r\n    },\r\n\r\n    saveTouch (tp) {\r\n        if (!this.touchData) {\r\n            this.touchData = \"ing\";\r\n            this.play(tp);\r\n        }\r\n        else if (this.touchData === \"ing\") {\r\n            this.touchData = tp;\r\n        }\r\n        else {\r\n            this.touchData = tp;\r\n        }\r\n    },\r\n\r\n    delTouch () {\r\n        if (!this.touchData) {\r\n        }\r\n        else if (this.touchData === \"ing\") {\r\n            this.touchData = null;\r\n        }\r\n        else {\r\n            // this.touchData = tp;\r\n            let tp = this.touchData;\r\n            this.touchData = \"ing\";\r\n            this.play(tp);\r\n        }\r\n    },\r\n\r\n    getAction () {\r\n        let id = 0;\r\n        let dataArr = [];        \r\n        let end = ()=>{\r\n            let i = id++;\r\n            if (i >= dataArr.length) {\r\n                return;\r\n            }\r\n            let {node, fun, arr} = dataArr[i];\r\n            fun.bind(node)(end, ...arr);\r\n        }\r\n\r\n        let add = (node, fun, ...arr)=>{\r\n            if (!node) {\r\n                return end();\r\n            }\r\n            if (!fun) {\r\n                return;\r\n            }\r\n            let data = {\r\n                node: node,\r\n                fun: fun,\r\n                arr: arr\r\n            }\r\n            dataArr.push(data);\r\n        }\r\n        return add;\r\n    },\r\n\r\n    touchOn (p) {\r\n        let tp = this.node.posMap.find(p);\r\n        if (tp) {\r\n            this.saveTouch(tp);\r\n        }\r\n    },\r\n\r\n    play (tp) {\r\n        let map = this.node.map;\r\n        let dir = this.getDir(tp);      \r\n        if (!dir) { //操作无效\r\n            this.delTouch();\r\n            return;\r\n        }  \r\n        let moveNode = map.get(tp);\r\n        this.moveType = moveNode.type;\r\n        moveNode.oriParent = moveNode.parent;\r\n        moveNode.parent = hjm._top;\r\n        let add = this.getAction();\r\n        add(this, this.run, tp, dir);\r\n        add(this, this.prePk);\r\n        if (this.moveType === \"me\") {\r\n            // this.isAtk = \r\n            // cc.log(\"me\");\r\n            let enPosArr = this.getAtkDefEn(tp.add(dir));\r\n            moveNode.defFun = this.defFun;\r\n            if (this.atkNode && enPosArr.length > 0) {\r\n                // cc.log(\"1111111111111111111\");\r\n                add(this.atkNode, this.atkNode.add, hjm._top, this.atkDir);\r\n                add(this, (end)=>{\r\n                    // cc.log(typeof this.atkNode.atk, typeof moveNode.atk);\r\n                    moveNode.atk += this.atkNode.atk;\r\n                    end();\r\n                });\r\n                // cc.log(\"atk\");\r\n            }\r\n            if (this.defNode && enPosArr.length > 0) {\r\n                // cc.log(\"2222222222222222\");\r\n                add(this.defNode, this.defNode.add, hjm._top, this.defDir);\r\n                add(this, (end)=>{\r\n                    moveNode.def += this.defNode.def;\r\n                    end();\r\n                });\r\n            }\r\n            cc.log(\"this.atkFun\", this.atkFun);\r\n            add(this, hjm._skill.add, this.atkFun, tp, map, this.node.posMap);\r\n            add(this, this.checkDie);\r\n            for (let i = enPosArr.length - 1; i >= 0; i--) {\r\n                let ep = enPosArr[i];\r\n                let en = map.get(ep);\r\n                add(this, hjm._skill.add, en.atkFun, ep, map, this.node.posMap);\r\n                add(this, this.checkDie);\r\n            }\r\n            // if (this.isAtk) {\r\n            //     add(this, this.node._skill.add, dyl.atkFun, tp, map, this.node.posMap);\r\n            // }\r\n            // else {\r\n            //     add(this, this.node._skill.add, \"notAtk\", tp, map, this.node.posMap);\r\n            // }\r\n        }\r\n        else if (this.moveType === \"en\") {\r\n            add(this, hjm._skill.add, moveNode.atkFun, tp, map, this.node.posMap);\r\n            add(this, this.checkDie);\r\n        }\r\n\r\n        add(this, this.endPlay, tp);\r\n        add(); \r\n    },\r\n\r\n    checkDie (end) {\r\n        let notLose = false;\r\n        let notWin = false;\r\n        let map = this.node.map;\r\n        map.run((tp)=>{\r\n            let node = map.get(tp);\r\n            if (node && node.hp <= 0) {\r\n                this.die(tp);\r\n                return;\r\n            }\r\n            if (node && node.type === \"me\") {\r\n                notLose = true;\r\n            }\r\n            if (node && node.type === \"en\") {\r\n                notWin = true;\r\n            }\r\n        })\r\n        if (!notLose) {\r\n            this.endAns = \"lose\";\r\n            end();\r\n            return;\r\n        }\r\n        if (!notWin) {\r\n            this.endAns = \"win\";\r\n            end();\r\n            return;\r\n        }\r\n        end();\r\n        return;\r\n    },\r\n\r\n    die (tp) {\r\n        let notArr = this.node.notArr;\r\n        let not = notArr[notArr.length - 1];\r\n        notArr.length--;\r\n        not.active = true;\r\n\r\n        let node = this.node.map.get(tp);\r\n        node.active = false;\r\n        not.setPosition(this.node.posMap.get(tp));\r\n        this.node.map.set(tp, not);\r\n    },\r\n\r\n    getAtkDefEn (tp) {\r\n        let map = this.node.map;\r\n        let dirArr = dyl.addDirArr();\r\n        let enPosArr = [];\r\n        this.atkFun = \"notAtk\";\r\n        this.defFun = \"notDef\";\r\n        this.atkNode = null;\r\n        this.defNode = null;\r\n        for (let i = 0; i < 4; i++) {\r\n            let dir = dirArr[i];\r\n            let ntp = dir.add(tp);\r\n            let type = map.get(ntp, \"type\");\r\n            if (type === \"atk\") {\r\n                this.atkFun = ai.atkFun;\r\n                this.atkNode = map.get(ntp);\r\n                this.atkDir = dir.mul(-this.node.posMap.d);\r\n            }\r\n            else if (type === \"def\") {\r\n                this.defFun = ai.defFun;\r\n                this.defNode = map.get(ntp);\r\n                this.defDir = dir.mul(-this.node.posMap.d);\r\n            }\r\n            else if (type === \"en\") {\r\n                enPosArr.push(ntp);\r\n            }\r\n        }\r\n        return enPosArr;\r\n    },\r\n\r\n    prePk (end) {\r\n        let map = this.node.map;\r\n        map.run((p)=>{\r\n            let node = map.get(p);\r\n            if (node && (node.type !== \"not\")) {\r\n                node.oriData = {\r\n                    // hp: node.hp,\r\n                    atk: node.atk,\r\n                    def: node.def\r\n                }\r\n            }\r\n        })\r\n        this.isAtk = \"notAtk\";\r\n        this.isDef = \"notDef\";\r\n        end();\r\n    },\r\n\r\n\r\n\r\n\r\n    // saveTouch (tp) {\r\n    //     if (!this.touchTp) {\r\n    //         this.play(tp);\r\n    //     }\r\n    // }, \r\n\r\n    endPlay (end, tp) {\r\n        cc.log(\"endPlay\");\r\n        let moveNode = this.node.map.get(tp);\r\n        moveNode.parent = moveNode.oriParent;\r\n        let map = this.node.map;\r\n        map.run((p)=>{\r\n            let node = map.get(p);\r\n            if (node && (node.type !== \"not\")) {\r\n                // node.hp = node.oriData.hp;\r\n                node.atk = node.oriData.atk;\r\n                node.def = node.oriData.def;\r\n            }\r\n        })\r\n        if (this.atkNode) {\r\n            this.atkNode.reset();\r\n        }\r\n        if (this.defNode) {\r\n            this.defNode.reset();\r\n        }\r\n        // this.checkDie();\r\n        this.delTouch();\r\n        if (this.endAns) {\r\n            this.node.touch = \"end\";\r\n            hjm._end.add(this.endAns, 0.3);\r\n        }\r\n        end();\r\n    },\r\n\r\n    run (end, tp, dir) {\r\n        let ntp = dir.add(tp);\r\n        let move = cc.moveTo(0.2, this.node.posMap.get(ntp));\r\n        // move.add = -3;\r\n        let node = this.node.map.get(tp);\r\n        dyl.run(node, move, ()=>{\r\n            this.node.map.set(tp, null);\r\n            this.node.map.set(ntp, node);\r\n            tp.x = ntp.x;\r\n            tp.y = ntp.y;\r\n        }, end);\r\n    },\r\n\r\n    getDir (tp) {\r\n        let map = this.node.map;\r\n        if (!map.get(tp)) {\r\n            return null;\r\n        }\r\n        let dirArr = dyl.addDirArr();\r\n        for (let i = 0; i < 4; i++) {\r\n            let dir = dirArr[i];\r\n            let ntp = dir.add(tp);\r\n            if (map.get(ntp) === null) {\r\n                return dir;\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n    // update (dt) {},\r\n});\r\n"],"sourceRoot":"/source/","file":"project.js"}